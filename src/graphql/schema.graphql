extend type Query {
  isLoggedIn: Boolean!
  cartItems: [Boolean]!
  gameState: GameState
}

extend type Mutation {
  addOrRemoveFromCart(id: ID!): [Boolean]
}

enum PersistanceLevel {
  ALWAYS
  GAME
  NEVER
}

interface Persistable {
  id: ID
  persistanceLevel: PersistanceLevel
}

interface GameState {
  boardState: BoardState
  mapState: MapState
  players: [Player]
  playerCards: [PlayerCard]
  infectionCards: [InfectionCard]
  resources: [Resource]
  actions: [Trait]
}

interface MapState {
  locations: [Location]
  routes: [Route]
}

interface BoardState {
  objectives: [Objective]
  notes: [Note]
  tags: [Tag]
  infectionRate: Int
  players: [Player]
  resourceStockpiles: [ResourcePile]
  infectionDeck: InfectionDeck
  playerDeck: PlayerDeck
}

type Objective implements Persistable {
  description: String
  isMandatory: Boolean
  isComplete: Boolean
}

type Note implements Persistable {
  description: String
}

enum LocationColor {
  BLUE
  YELLOW
  BLACK
  RED
  MISC
}

type Location implements Persistable {
  name: String
  position: Position
  color: LocationColor
  resourcePiles: [ResourcePile]
  tags: [Tag]
}

type Position {
  x: Float
  y: Float
}

type Route implements Persistable {
  start: Location
  end: Location
  resourcePiles: [ResourcePile]
  tags: [Tag]
  isWrapping: Boolean
}

type Player implements Persistable {
  name: String
  location: Location
  traits: [Trait]
  cards: [PlayerCard]
  resourcePiles: [ResourcePile]
  tags: [Tag]
}

type PlayerDeck {
  drawPile: [PlayerCard]
  drawPileSizes: [Int]
  discardPile: [PlayerCard]
  outOfGamePile: [PlayerCard]
  tags: [Tag]
}

enum PlayerCardType {
  LOCATION
  EVENT
  EPIDEMIC
  MISC
}

type PlayerCard implements Persistable {
  name: String
  description: String
  location: Location
  type: PlayerCardType
  traits: [Trait]
  tags: [Tag]
}

type InfectionDeck {
  drawPileStacks: [InfectionDeckStack]
  discardPile: [InfectionCard]
  outOfGamePile: [InfectionCard]
  tags: [Tag]
}

type InfectionDeckStack {
  shuffledCards: [InfectionCard]
}

enum InfectionCardType {
  LOCATION
  MISC
}

type InfectionCard implements Persistable {
  name: String
  description: String
  location: Location
  type: InfectionCardType
  traits: [Trait]
  tags: [Tag]
}

enum TraitType {
  PLAYER
  PLAYER_CARD
  INFECTION_CARD
  MISC
}

type Trait {
  name: String
  description: String
  type: TraitType
}

type Collection implements Persistable {
  name: String
  condition: Condition
  description: String
  tags: [Tag]
}

type ResourcePile implements Persistable {
  resource: Resource
  count: Int
  tags: [Tag]
}

type Resource implements Persistable {
  name: String
  stockCount: Int
}

type Tag implements Persistable {
  name: String
  description: String
  condition: Condition
}

type Condition {
  query: String
}
