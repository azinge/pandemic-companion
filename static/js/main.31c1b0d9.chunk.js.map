{"version":3,"sources":["graphql/types.ts","utils/pandemic-presets.ts","utils/store.ts","graphql/resolvers.ts","graphql/client.ts","components/CommandCenterScreen/views/InfectionDeckView/InfectionDeckView.requests.ts","utils/view-logic.ts","components/CommandCenterScreen/modals/InfectionDeckModal/InfectionDeckModal.tsx","components/CommandCenterScreen/modals/InfectionDeckModal/index.ts","components/CommandCenterScreen/views/PlayerDeckView/PlayerDeckView.requests.ts","components/CommandCenterScreen/modals/PlayerDeckModal/PlayerDeckModal.tsx","components/CommandCenterScreen/modals/PlayerDeckModal/index.ts","components/CommandCenterScreen/modals/SettingsModal/AlertSettingsPanel/index.ts","components/CommandCenterScreen/modals/SettingsModal/AlertSettingsPanel/AlertSettingsPanel.tsx","components/CommandCenterScreen/views/ObjectivesView/ObjectivesView.requests.ts","components/CommandCenterScreen/modals/SettingsModal/ObjectiveSettingsPanel/ObjectiveSettingsPanel.tsx","components/CommandCenterScreen/modals/SettingsModal/ObjectiveSettingsPanel/index.ts","components/CommandCenterScreen/views/InfoPanelView/InfoPanelView.requests.ts","components/CommandCenterScreen/modals/SettingsModal/ResourceSettingsPanel/ResourceSettingsPanel.tsx","components/CommandCenterScreen/modals/SettingsModal/ResourceSettingsPanel/index.ts","components/CommandCenterScreen/modals/SettingsModal/TagSettingsPanel/TagSettingsPanel.tsx","components/CommandCenterScreen/modals/SettingsModal/TagSettingsPanel/index.ts","components/CommandCenterScreen/views/NotesView/NotesView.requests.ts","components/CommandCenterScreen/modals/SettingsModal/NoteSettingsPanel/NoteSettingsPanel.tsx","components/CommandCenterScreen/modals/SettingsModal/NoteSettingsPanel/index.ts","components/CommandCenterScreen/views/TraitsView/TraitsView.requests.ts","components/CommandCenterScreen/modals/SettingsModal/ActionSettingsPanel/ActionSettingsPanel.tsx","components/CommandCenterScreen/modals/SettingsModal/ActionSettingsPanel/index.ts","components/CommandCenterScreen/modals/SettingsModal/PlayerSettingsPanel/PlayerSettingsPanel.requests.ts","components/CommandCenterScreen/modals/SettingsModal/PlayerSettingsPanel/index.ts","components/CommandCenterScreen/modals/SettingsModal/PlayerSettingsPanel/PlayerSettingsPanel.tsx","components/CommandCenterScreen/modals/SettingsModal/LocationSettingsPanel/LocationSettingsPanel.requests.ts","components/CommandCenterScreen/modals/SettingsModal/LocationSettingsPanel/index.ts","components/CommandCenterScreen/modals/SettingsModal/LocationSettingsPanel/LocationSettingsPanel.tsx","components/CommandCenterScreen/modals/SettingsModal/InfectionCardSettingsPanel/InfectionCardSettingsPanel.requests.ts","components/CommandCenterScreen/modals/SettingsModal/InfectionCardSettingsPanel/index.ts","components/CommandCenterScreen/modals/SettingsModal/InfectionCardSettingsPanel/InfectionCardSettingsPanel.tsx","components/CommandCenterScreen/modals/SettingsModal/PlayerCardSettingsPanel/PlayerCardSettingsPanel.requests.ts","components/CommandCenterScreen/modals/SettingsModal/PlayerCardSettingsPanel/index.ts","components/CommandCenterScreen/modals/SettingsModal/PlayerCardSettingsPanel/PlayerCardSettingsPanel.tsx","components/CommandCenterScreen/modals/SettingsModal/SettingsModal.tsx","components/CommandCenterScreen/modals/SettingsModal/index.ts","components/CommandCenterScreen/views/TraitsView/index.ts","components/CommandCenterScreen/views/TraitsView/TraitsView.tsx","components/CommandCenterScreen/views/MapView/MapView.requests.ts","components/CommandCenterScreen/views/MapView/index.ts","components/CommandCenterScreen/views/MapView/MapView.tsx","components/CommandCenterScreen/views/DetailView/LocationDetailView/index.ts","components/CommandCenterScreen/views/DetailView/LocationDetailView/LocationDetailView.tsx","components/CommandCenterScreen/views/DetailView/RouteDetailView/index.ts","components/CommandCenterScreen/views/DetailView/RouteDetailView/RouteDetailView.tsx","components/CommandCenterScreen/views/DetailView/PlayerDetailView/index.ts","components/CommandCenterScreen/views/DetailView/PlayerDetailView/PlayerDetailView.tsx","components/CommandCenterScreen/views/DetailView/index.ts","components/CommandCenterScreen/views/DetailView/DetailView.tsx","components/CommandCenterScreen/views/InfectionDeckView/index.ts","components/CommandCenterScreen/views/InfectionDeckView/InfectionDeckView.tsx","components/CommandCenterScreen/views/PlayersView/PlayersView.requests.ts","components/CommandCenterScreen/CommandCenterScreen.tsx","components/CommandCenterScreen/views/PlayersView/index.ts","components/CommandCenterScreen/views/PlayersView/PlayersView.tsx","components/CommandCenterScreen/views/PlayerDeckView/index.ts","components/CommandCenterScreen/views/PlayerDeckView/PlayerDeckView.tsx","components/CommandCenterScreen/views/ObjectivesView/index.ts","components/CommandCenterScreen/views/ObjectivesView/ObjectivesView.tsx","components/CommandCenterScreen/views/InfoPanelView/index.ts","components/CommandCenterScreen/views/InfoPanelView/InfoPanelView.tsx","components/CommandCenterScreen/views/NotesView/index.ts","components/CommandCenterScreen/views/NotesView/NotesView.tsx","components/CommandCenterScreen/index.ts","app/router.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["PersistanceLevel","LocationColor","PlayerCardType","InfectionCardType","TraitType","createPandemicBasePlayerCardList","locationDictionary","id","basePlayerCard","__typename","persistanceLevel","ALWAYS","traits","tags","location","color","MISC","resourcePiles","name","position","x","y","description","map","type","EPIDEMIC","Object","keys","key","LOCATION","baseEventPlayerCard","EVENT","createEventPlayerCards","createPandemicBaseInfectionCardList","createPandemicBaseResourceStockpileList","resourceDictionary","resource","count","stockCount","createPandemicBaseBoardState","infectionCardList","playerCardList","playerDictionary","emptyBoardState","objectives","notes","players","resourceStockpiles","infectionDeck","drawPileStacks","discardPile","outOfGamePile","playerDeck","drawPile","drawPileSizes","infectionRate","objectiveList","isMandatory","isComplete","createPandemicBaseObjectiveList","tagList","baseTag","createPandemicBaseTagList","resourceStockpileList","Researcher","Scientist","Medic","Dispatcher","shuffledCards","gameState","convertDictionaryToValueList","dictionary","basePlayer","cards","traitID","baseTrait","PLAYER","Operations_Expert","Quarantine_Specialist","Contingency_Planner","createPandemicBasePlayerDictionary","baseLocation","San_Francisco","BLUE","Chicago","Atlanta","Montreal","Washington","New_York","Madrid","London","Paris","Essen","Milan","St_Petersburg","Los_Angeles","YELLOW","Mexico_City","Miami","Bogota","Lima","Santiago","Buenos_Aires","Sao_Paulo","Lagos","Kinshasa","Johannesburg","Khartoum","Algiers","BLACK","Istanbul","Cairo","Baghdad","Moscow","Riyadh","Tehran","Karachi","Mumbai","Delhi","Chennai","Kolkata","Beijing","RED","Seoul","Shanghai","Tokyo","Hong_Kong","Taipei","Osaka","Bangkok","Ho_Chi_Minh_City","Manila","Jakarta","Sydney","createPandemicBaseLocationDictionary","actionDictionary","baseAction","Drive_Ferry","Direct_Flight","Charter_Flight","Shuttle_Flight","Build_A_Research_Station","Treat_Disease","Share_Knowledge","Discover_A_Cure","createPandemicBaseActionDictionary","baseResource","Blue_Disease_Cubes","Red_Disease_Cubes","Yellow_Disease_Cubes","Black_Disease_Cubes","Research_Stations","createPandemicBaseResourceDictionary","routeList","l","createRoute","start","end","isWrapping","createPandemicBaseRouteList","playerCards","infectionCards","resources","actions","mapState","locations","routes","boardState","createPandemicBaseGameState","getGameState","saveGameState","window","localStorage","setItem","stringify","resolvers","Query","_root","variables","client","Mutation","saveInfectionDeck","srcDropId","srcIndex","dstDropId","dstIndex","oc","arrMap","Discard_Pile","Out_Of_Game_Pile","forEach","drawPileStack","index","a","splice","savePlayerDeck","Draw_Pile","player","createObjective","push","uniqid","updateObjective","data","o","find","objective","assign","deleteObjective","filter","createResourceStockpile","resourcePile","updateResourceStockpile","resourceData","resourceStockpile","deleteResourceStockpile","rsp","undefined","createGlobalTag","updateGlobalTag","tag","deleteGlobalTag","createNote","updateNote","note","deleteNote","createGlobalAction","updateGlobalAction","action","deleteGlobalAction","createInfectionDeckStack","unshift","deleteInfectionDeckStack","console","log","i","updateLocationPosition","ApolloClient","uri","defaultOptions","watchQuery","fetchPolicy","errorPolicy","query","GET_INFECTION_DECK","gql","SAVE_INFECTION_DECK","CREATE_INFECTION_DECK_STACK","DELETE_INFECTION_DECK_STACK","getHexColorFromLocationColor","locationColor","getLightHexColorFromLocationColor","createInfectionCard","card","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","style","backgroundColor","height","width","Modal","setAppElement","InfectionDeckModal","props","useMutation","refetchQueries","useQuery","onDragEnd","useCallback","result","destination","source","droppableId","droppableDict","isOpen","onRequestClose","closeModal","contentLabel","onClick","display","flexDirection","flex","borderStyle","margin","padding","minHeight","borderColor","droppableProps","placeholder","createDrawPileStacks","GET_PLAYER_DECK","SAVE_PLAYER_DECK","createPlayerCard","PlayerDeckModal","React","createPlayerHands","AlertSettingsPanel","textAlign","fontSize","justifyContent","alert","GET_OBJECTIVES","CREATE_OBJECTIVE","UPDATE_OBJECTIVE","DELETE_OBJECTIVE","ObjectiveItem","useState","inEditMode","setInEditMode","objectiveData","setObjectiveData","useEffect","value","onChange","e","target","checked","ObjectiveSettingsPanel","loading","error","paddingLeft","paddingRight","GET_GENERAL_INFO","CREATE_RESOURCE_STOCKPILE","UPDATE_RESOURCE_STOCKPILE","DELETE_RESOURCE_STOCKPILE","CREATE_GLOBAL_TAG","UPDATE_GLOBAL_TAG","DELETE_GLOBAL_TAG","ResourceItem","resourceStockpileData","setResourceStockpileData","setResourceData","updateResource","deleteResource","ResourceSettingsPanel","TagItem","tagData","setTagData","updateTag","deleteTag","TagSettingsPanel","createTag","GET_NOTES","CREATE_NOTE","UPDATE_NOTE","DELETE_NOTE","NoteItem","noteData","setNoteData","NoteSettingsPanel","GET_GENERAL_ACTIONS","CREATE_GLOBAL_ACTION","UPDATE_GLOBAL_ACTION","DELETE_GLOBAL_ACTION","ActionItem","actionData","setActionData","updateAction","deleteAction","ActionSettingsPanel","createAction","PlayerFragments","default","GET_PLAYERS_INFO","PlayerSettingsPanel","selectedPlayer","setSelectedPlayer","activePlayers","direction","LocationFragments","GET_MAP_STATE_INFO","LocationSettingsPanel","selectedLocation","setSelectedLocation","overflow","route","InfectionCardFragments","GET_INFECTION_CARDS_INFO","InfectionCardSettingsPanel","selectedInfectionCard","setSelectedInfectionCard","infectionCard","PlayerCardFragments","GET_PLAYER_CARDS_INFO","PlayerCardSettingsPanel","selectedPlayerCard","setSelectedPlayerCard","playerCard","SettingsModal","TraitsView","playerTraits","reduce","acc","cur","borderWidth","borderRadius","playerTrait","GET_MAP_STATE","UPDATE_LOCATION_POSITION","MapView","nodes","links","graphData","setGraphData","strokeWidth","left","setSelectedItem","config","nodeHighlightBehavior","highlightOpacity","node","labelProperty","fontColor","size","highlightStrokeColor","link","highlightColor","staticGraphWithDragAndDrop","maxZoom","minZoom","onClickNode","nodeId","onClickLink","selectedRoute","renderGraph","LocationDetailView","RouteDetailView","PlayerDetailView","DetailView","selectedItem","getSelectedDetailView","InfectionDeckView","infectionDeckStats","length","openModal","infectionDeckStat","ModalName","GET_PLAYERS","PlayersView","PlayerDeckView","numEventCardsInDrawPile","playerDeckStats","playerDeckStat","ObjectivesView","InfoPanelView","NotesView","CommandCenterScreen","settings","modalStates","setModalStates","setActiveModal","activeModal","PLAYER_DECK_MODAL","INFECTION_DECK_MODAL","SETTINGS_MODAL","dismissActiveModal","temp","getItem","parse","loadGameState","resetStore","AppRouter","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31c1b0d9.chunk.js","sourcesContent":["export interface GQLType {\n  __typename?: string;\n}\n\nexport enum PersistanceLevel {\n  ALWAYS,\n  GAME,\n  NEVER,\n}\n\nexport interface Persistable {\n  id?: string;\n  persistanceLevel?: PersistanceLevel;\n}\n\nexport interface GameState extends GQLType {\n  boardState?: BoardState;\n  mapState?: MapState;\n  players?: Player[];\n  playerCards?: PlayerCard[];\n  infectionCards?: InfectionCard[];\n  resources?: Resource[];\n  actions?: Trait[];\n}\n\nexport interface MapState extends GQLType {\n  locations?: Location[];\n  routes?: Route[];\n}\n\nexport interface BoardState extends GQLType {\n  objectives?: Objective[];\n  notes?: Note[];\n  tags?: Tag[];\n  infectionRate?: number;\n  players?: Player[];\n  resourceStockpiles?: ResourcePile[];\n  infectionDeck?: InfectionDeck;\n  playerDeck?: PlayerDeck;\n}\n\nexport interface Objective extends Persistable, GQLType {\n  description?: string;\n  isMandatory?: Boolean;\n  isComplete?: Boolean;\n}\n\nexport interface Note extends Persistable, GQLType {\n  description?: string;\n}\n\nexport enum LocationColor {\n  BLUE,\n  YELLOW,\n  BLACK,\n  RED,\n  MISC,\n}\n\nexport interface Location extends Persistable, GQLType {\n  name?: string;\n  position?: Position;\n  color?: LocationColor;\n  resourcePiles?: ResourcePile[];\n  tags?: Tag[];\n}\n\nexport interface Position extends GQLType {\n  x?: number;\n  y?: number;\n}\n\nexport interface Route extends Persistable, GQLType {\n  start?: Location;\n  end?: Location;\n  resourcePiles?: ResourcePile[];\n  tags?: Tag[];\n  isWrapping?: boolean;\n}\n\nexport interface Player extends Persistable, GQLType {\n  name?: string;\n  location?: Location;\n  traits?: Trait[];\n  cards?: PlayerCard[];\n  resourcePiles?: ResourcePile[];\n  tags?: Tag[];\n}\n\nexport interface PlayerDeck extends GQLType {\n  drawPile?: PlayerCard[];\n  drawPileSizes?: number[];\n  discardPile?: PlayerCard[];\n  outOfGamePile?: PlayerCard[];\n  tags?: Tag[];\n}\n\nexport enum PlayerCardType {\n  LOCATION,\n  EVENT,\n  EPIDEMIC,\n  MISC,\n}\n\nexport interface PlayerCard extends Persistable, GQLType {\n  name?: string;\n  description?: string;\n  location?: Location;\n  type?: PlayerCardType;\n  traits?: Trait[];\n  tags?: Tag[];\n}\n\nexport interface InfectionDeck extends GQLType {\n  drawPileStacks?: InfectionDeckStack[];\n  discardPile?: InfectionCard[];\n  outOfGamePile?: InfectionCard[];\n  tags?: Tag[];\n}\n\nexport interface InfectionDeckStack extends GQLType {\n  shuffledCards?: InfectionCard[];\n}\n\nexport enum InfectionCardType {\n  LOCATION,\n  MISC,\n}\n\nexport interface InfectionCard extends Persistable, GQLType {\n  name?: string;\n  description?: string;\n  location?: Location;\n  type?: InfectionCardType;\n  traits?: Trait[];\n  tags?: Tag[];\n}\n\nexport enum TraitType {\n  PLAYER,\n  PLAYER_CARD,\n  INFECTION_CARD,\n  MISC,\n}\n\nexport interface Trait extends Persistable, GQLType {\n  name?: string;\n  description?: string;\n  type?: TraitType;\n}\n\nexport interface ResourcePile extends Persistable, GQLType {\n  resource?: Resource;\n  count?: number;\n  tags?: Tag[];\n}\n\nexport interface Resource extends Persistable, GQLType {\n  name?: string;\n  stockCount?: number;\n}\n\nexport interface Tag extends Persistable, GQLType {\n  name?: string;\n  description?: string;\n}\n","import {\n  BoardState,\n  MapState,\n  Player,\n  PlayerCard,\n  InfectionCard,\n  Resource,\n  Trait,\n  GameState,\n  TraitType,\n  PersistanceLevel,\n  Location,\n  LocationColor,\n  PlayerCardType,\n  InfectionCardType,\n} from '../graphql/types';\n\ntype LocationDictionary = { [key: string]: Location };\ntype ResourceDictionary = { [key: string]: Resource };\ntype PlayerDictionary = { [key: string]: Resource };\n\nexport const createEmptyMapState = () => {\n  const mapState: MapState = {\n    __typename: 'MapState',\n    locations: [],\n    routes: [],\n  };\n  return mapState;\n};\n\nexport const createEmptyBoardState = () => {\n  const boardState: BoardState = {\n    __typename: 'BoardState',\n    objectives: [],\n    notes: [],\n    players: [],\n    resourceStockpiles: [],\n    infectionDeck: {\n      __typename: 'InfectionDeck',\n      drawPileStacks: [],\n      discardPile: [],\n      outOfGamePile: [],\n      tags: [],\n    },\n    playerDeck: {\n      __typename: 'PlayerDeck',\n      drawPile: [],\n      drawPileSizes: [],\n      discardPile: [],\n      outOfGamePile: [],\n      tags: [],\n    },\n    infectionRate: 0,\n  };\n  return boardState;\n};\n\nexport const createEmptyGameState = () => {\n  const players: Player[] = [];\n  const playerCards: PlayerCard[] = [];\n  const infectionCards: InfectionCard[] = [];\n  const resources: Resource[] = [];\n  const actions: Trait[] = [];\n  const mapState = createEmptyMapState();\n  const boardState = createEmptyBoardState();\n\n  const gameState: GameState = {\n    __typename: 'GameState',\n    players,\n    playerCards,\n    infectionCards,\n    resources,\n    actions,\n    mapState,\n    boardState,\n  };\n  return gameState;\n};\n\nexport const createPandemicBasePlayerDictionary = () => {\n  let id = 1;\n  const basePlayer = () => {\n    return {\n      __typename: 'Player',\n      id: `player-${id++}`,\n      persistanceLevel: PersistanceLevel.ALWAYS,\n      location: {\n        __typename: 'Location',\n        color: LocationColor.MISC,\n        id: `location-${id++}`,\n        persistanceLevel: PersistanceLevel.ALWAYS,\n        resourcePiles: [],\n        tags: [],\n        name: '',\n        position: { x: 0, y: 0, __typename: 'Position' },\n      },\n      cards: [],\n      resourcePiles: [],\n      tags: [],\n    };\n  };\n  let traitID = 1;\n  const baseTrait = () => ({\n    __typename: 'Trait',\n    id: `trait-${traitID++}`,\n    persistanceLevel: PersistanceLevel.ALWAYS,\n    name: '',\n    type: TraitType.PLAYER,\n  });\n  const Scientist: Player = {\n    ...basePlayer(),\n    name: 'Scientist',\n    traits: [\n      {\n        ...baseTrait(),\n        description:\n          'You need only 4 cards of the same color to do the Discover a Cure action.',\n      },\n    ],\n  };\n  const Researcher: Player = {\n    ...basePlayer(),\n    name: 'Researcher',\n    traits: [\n      {\n        ...baseTrait(),\n        description:\n          'As an action, you may give (or a player can take) any City card from your hand. ' +\n          'You must both be in the same city. The card does not have to match the city you are in.',\n      },\n    ],\n  };\n  const Medic: Player = {\n    ...basePlayer(),\n    name: 'Medic',\n    traits: [\n      {\n        ...baseTrait(),\n        description: 'Remove all cubes of one color when doing Treat Disease.',\n      },\n      {\n        ...baseTrait(),\n        description:\n          'Automatically remove cubes of cured diseases from the city you are in (and prevent them from being placed there).',\n      },\n    ],\n  };\n  const Dispatcher: Player = {\n    ...basePlayer(),\n    name: 'Dispatcher',\n    traits: [\n      {\n        ...baseTrait(),\n        description: \"Move another player's pawn as if it were yours.\",\n      },\n      {\n        ...baseTrait(),\n        description:\n          'As an action, move any pawn to another city with another pawn.',\n      },\n    ],\n  };\n  const Operations_Expert: Player = {\n    ...basePlayer(),\n    name: 'Operations Expert',\n    traits: [\n      {\n        ...baseTrait(),\n        description:\n          'As an action, build a research station in the city you are in (no discard needed).',\n      },\n      {\n        ...baseTrait(),\n        description:\n          'Once per turn as an action, move from a research station to any other city by discarding any City card.',\n      },\n    ],\n  };\n  const Quarantine_Specialist: Player = {\n    ...basePlayer(),\n    name: 'Quarantine Specialist',\n    traits: [\n      {\n        ...baseTrait(),\n        description:\n          'Prevent disease cube placements (and outbreaks) in the city you are in and all cities connected to it.',\n      },\n    ],\n  };\n  const Contingency_Planner: Player = {\n    ...basePlayer(),\n    name: 'Contingency Planner',\n    traits: [\n      {\n        ...baseTrait(),\n        description:\n          \"As an action, take any discarded Event card and store it on this player's card (Limit 1).\" +\n          'When you play the stored Event card, remove it from the game.',\n      },\n    ],\n  };\n  return {\n    Scientist,\n    Researcher,\n    Medic,\n    Dispatcher,\n    Operations_Expert,\n    Quarantine_Specialist,\n    Contingency_Planner,\n  };\n};\n\nexport const createPandemicBaseLocationDictionary = () => {\n  let id = 1;\n  const baseLocation = () => {\n    return {\n      __typename: 'Location',\n      id: `location-${id++}`,\n      persistanceLevel: PersistanceLevel.ALWAYS,\n      resourcePiles: [],\n      tags: [],\n    };\n  };\n  const San_Francisco: Location = {\n    ...baseLocation(),\n    name: 'San Francisco',\n    color: LocationColor.BLUE,\n    position: { x: -41, y: 11, __typename: 'Position' },\n  };\n  const Chicago: Location = {\n    ...baseLocation(),\n    name: 'Chicago',\n    color: LocationColor.BLUE,\n    position: { x: -33, y: 13, __typename: 'Position' },\n  };\n  const Atlanta: Location = {\n    ...baseLocation(),\n    name: 'Atlanta',\n    color: LocationColor.BLUE,\n    position: { x: -30, y: 8, __typename: 'Position' },\n  };\n  const Montreal: Location = {\n    ...baseLocation(),\n    name: 'Montreal',\n    color: LocationColor.BLUE,\n    position: { x: -26, y: 13, __typename: 'Position' },\n  };\n  const Washington: Location = {\n    ...baseLocation(),\n    name: 'Washington',\n    color: LocationColor.BLUE,\n    position: { x: -23, y: 9, __typename: 'Position' },\n  };\n  const New_York: Location = {\n    ...baseLocation(),\n    name: 'New York',\n    color: LocationColor.BLUE,\n    position: { x: -20, y: 13, __typename: 'Position' },\n  };\n  const Madrid: Location = {\n    ...baseLocation(),\n    name: 'Madrid',\n    color: LocationColor.BLUE,\n    position: { x: -9, y: 10, __typename: 'Position' },\n  };\n  const London: Location = {\n    ...baseLocation(),\n    name: 'London',\n    color: LocationColor.BLUE,\n    position: { x: -8, y: 17, __typename: 'Position' },\n  };\n  const Paris: Location = {\n    ...baseLocation(),\n    name: 'Paris',\n    color: LocationColor.BLUE,\n    position: { x: -3, y: 13, __typename: 'Position' },\n  };\n  const Essen: Location = {\n    ...baseLocation(),\n    name: 'Essen',\n    color: LocationColor.BLUE,\n    position: { x: -1, y: 18, __typename: 'Position' },\n  };\n  const Milan: Location = {\n    ...baseLocation(),\n    name: 'Milan',\n    color: LocationColor.BLUE,\n    position: { x: 2, y: 15, __typename: 'Position' },\n  };\n  const St_Petersburg: Location = {\n    ...baseLocation(),\n    name: 'St. Petersburg',\n    color: LocationColor.BLUE,\n    position: { x: 7, y: 20, __typename: 'Position' },\n  };\n  const Los_Angeles: Location = {\n    ...baseLocation(),\n    name: 'Los Angeles',\n    color: LocationColor.YELLOW,\n    position: { x: -40, y: 4, __typename: 'Position' },\n  };\n  const Mexico_City: Location = {\n    ...baseLocation(),\n    name: 'Mexico City',\n    color: LocationColor.YELLOW,\n    position: { x: -34, y: 1, __typename: 'Position' },\n  };\n  const Miami: Location = {\n    ...baseLocation(),\n    name: 'Miami',\n    color: LocationColor.YELLOW,\n    position: { x: -26, y: 3, __typename: 'Position' },\n  };\n  const Bogota: Location = {\n    ...baseLocation(),\n    name: 'Bogota',\n    color: LocationColor.YELLOW,\n    position: { x: -27, y: -4, __typename: 'Position' },\n  };\n  const Lima: Location = {\n    ...baseLocation(),\n    name: 'Lima',\n    color: LocationColor.YELLOW,\n    position: { x: -29, y: -12, __typename: 'Position' },\n  };\n  const Santiago: Location = {\n    ...baseLocation(),\n    name: 'Santiago',\n    color: LocationColor.YELLOW,\n    position: { x: -28, y: -20, __typename: 'Position' },\n  };\n  const Buenos_Aires: Location = {\n    ...baseLocation(),\n    name: 'Buenos Aires',\n    color: LocationColor.YELLOW,\n    position: { x: -21, y: -18, __typename: 'Position' },\n  };\n  const Sao_Paulo: Location = {\n    ...baseLocation(),\n    name: 'Sao Paulo',\n    color: LocationColor.YELLOW,\n    position: { x: -17, y: -13, __typename: 'Position' },\n  };\n  const Lagos: Location = {\n    ...baseLocation(),\n    name: 'Lagos',\n    color: LocationColor.YELLOW,\n    position: { x: -3, y: -3, __typename: 'Position' },\n  };\n  const Kinshasa: Location = {\n    ...baseLocation(),\n    name: 'Kinshasa',\n    color: LocationColor.YELLOW,\n    position: { x: 1, y: -8, __typename: 'Position' },\n  };\n  const Johannesburg: Location = {\n    ...baseLocation(),\n    name: 'Johannesburg',\n    color: LocationColor.YELLOW,\n    position: { x: 5, y: -15, __typename: 'Position' },\n  };\n  const Khartoum: Location = {\n    ...baseLocation(),\n    name: 'Khartoum',\n    color: LocationColor.YELLOW,\n    position: { x: 6, y: -2, __typename: 'Position' },\n  };\n  const Algiers: Location = {\n    ...baseLocation(),\n    name: 'Algiers',\n    color: LocationColor.BLACK,\n    position: { x: -1, y: 6, __typename: 'Position' },\n  };\n  const Istanbul: Location = {\n    ...baseLocation(),\n    name: 'Istanbul',\n    color: LocationColor.BLACK,\n    position: { x: 5, y: 11, __typename: 'Position' },\n  };\n  const Cairo: Location = {\n    ...baseLocation(),\n    name: 'Cairo',\n    color: LocationColor.BLACK,\n    position: { x: 4, y: 5, __typename: 'Position' },\n  };\n  const Baghdad: Location = {\n    ...baseLocation(),\n    name: 'Baghdad',\n    color: LocationColor.BLACK,\n    position: { x: 10, y: 7, __typename: 'Position' },\n  };\n  const Moscow: Location = {\n    ...baseLocation(),\n    name: 'Moscow',\n    color: LocationColor.BLACK,\n    position: { x: 11, y: 15, __typename: 'Position' },\n  };\n  const Riyadh: Location = {\n    ...baseLocation(),\n    name: 'Riyadh',\n    color: LocationColor.BLACK,\n    position: { x: 11, y: 1, __typename: 'Position' },\n  };\n  const Tehran: Location = {\n    ...baseLocation(),\n    name: 'Tehran',\n    color: LocationColor.BLACK,\n    position: { x: 15, y: 11, __typename: 'Position' },\n  };\n  const Karachi: Location = {\n    ...baseLocation(),\n    name: 'Karachi',\n    color: LocationColor.BLACK,\n    position: { x: 16, y: 5, __typename: 'Position' },\n  };\n  const Mumbai: Location = {\n    ...baseLocation(),\n    name: 'Mumbai',\n    color: LocationColor.BLACK,\n    position: { x: 17, y: 0, __typename: 'Position' },\n  };\n  const Delhi: Location = {\n    ...baseLocation(),\n    name: 'Delhi',\n    color: LocationColor.BLACK,\n    position: { x: 21, y: 7, __typename: 'Position' },\n  };\n  const Chennai: Location = {\n    ...baseLocation(),\n    name: 'Chennai',\n    color: LocationColor.BLACK,\n    position: { x: 22, y: -4, __typename: 'Position' },\n  };\n  const Kolkata: Location = {\n    ...baseLocation(),\n    name: 'Kolkata',\n    color: LocationColor.BLACK,\n    position: { x: 26, y: 5, __typename: 'Position' },\n  };\n  const Beijing: Location = {\n    ...baseLocation(),\n    name: 'Beijing',\n    color: LocationColor.RED,\n    position: { x: 30, y: 13, __typename: 'Position' },\n  };\n  const Seoul: Location = {\n    ...baseLocation(),\n    name: 'Seoul',\n    color: LocationColor.RED,\n    position: { x: 36, y: 14, __typename: 'Position' },\n  };\n  const Shanghai: Location = {\n    ...baseLocation(),\n    name: 'Shanghai',\n    color: LocationColor.RED,\n    position: { x: 31, y: 8, __typename: 'Position' },\n  };\n  const Tokyo: Location = {\n    ...baseLocation(),\n    name: 'Tokyo',\n    color: LocationColor.RED,\n    position: { x: 41, y: 11, __typename: 'Position' },\n  };\n  const Hong_Kong: Location = {\n    ...baseLocation(),\n    name: 'Hong Kong',\n    color: LocationColor.RED,\n    position: { x: 32, y: 2, __typename: 'Position' },\n  };\n  const Taipei: Location = {\n    ...baseLocation(),\n    name: 'Taipei',\n    color: LocationColor.RED,\n    position: { x: 37, y: 4, __typename: 'Position' },\n  };\n  const Osaka: Location = {\n    ...baseLocation(),\n    name: 'Osaka',\n    color: LocationColor.RED,\n    position: { x: 42, y: 5, __typename: 'Position' },\n  };\n  const Bangkok: Location = {\n    ...baseLocation(),\n    name: 'Bangkok',\n    color: LocationColor.RED,\n    position: { x: 27, y: -1, __typename: 'Position' },\n  };\n  const Ho_Chi_Minh_City: Location = {\n    ...baseLocation(),\n    name: 'Ho Chi Minh City',\n    color: LocationColor.RED,\n    position: { x: 33, y: -6, __typename: 'Position' },\n  };\n  const Manila: Location = {\n    ...baseLocation(),\n    name: 'Manila',\n    color: LocationColor.RED,\n    position: { x: 37, y: -5, __typename: 'Position' },\n  };\n  const Jakarta: Location = {\n    ...baseLocation(),\n    name: 'Jakarta',\n    color: LocationColor.RED,\n    position: { x: 26, y: -10, __typename: 'Position' },\n  };\n  const Sydney: Location = {\n    ...baseLocation(),\n    name: 'Sydney',\n    color: LocationColor.RED,\n    position: { x: 42, y: -19, __typename: 'Position' },\n  };\n  return {\n    San_Francisco,\n    Chicago,\n    Atlanta,\n    Montreal,\n    Washington,\n    New_York,\n    Madrid,\n    London,\n    Paris,\n    Essen,\n    Milan,\n    St_Petersburg,\n    Los_Angeles,\n    Mexico_City,\n    Miami,\n    Bogota,\n    Lima,\n    Santiago,\n    Buenos_Aires,\n    Sao_Paulo,\n    Lagos,\n    Kinshasa,\n    Johannesburg,\n    Khartoum,\n    Algiers,\n    Istanbul,\n    Cairo,\n    Baghdad,\n    Moscow,\n    Riyadh,\n    Tehran,\n    Karachi,\n    Mumbai,\n    Delhi,\n    Chennai,\n    Kolkata,\n    Beijing,\n    Seoul,\n    Shanghai,\n    Tokyo,\n    Hong_Kong,\n    Taipei,\n    Osaka,\n    Bangkok,\n    Ho_Chi_Minh_City,\n    Manila,\n    Jakarta,\n    Sydney,\n  };\n};\n\nexport const createPandemicBaseRouteList = (l: LocationDictionary) => {\n  let id = 1;\n  const createRoute = (\n    start: Location,\n    end: Location,\n    isWrapping?: boolean\n  ) => {\n    return {\n      __typename: 'Route',\n      id: `route-${id++}`,\n      persistanceLevel: PersistanceLevel.ALWAYS,\n      start,\n      end,\n      resourcePiles: [],\n      tags: [],\n      isWrapping: isWrapping || false,\n    };\n  };\n  return [\n    createRoute(l.San_Francisco, l.Tokyo, true),\n    createRoute(l.San_Francisco, l.Manila, true),\n    createRoute(l.San_Francisco, l.Chicago),\n    createRoute(l.San_Francisco, l.Los_Angeles),\n    createRoute(l.Chicago, l.Los_Angeles),\n    createRoute(l.Chicago, l.Mexico_City),\n    createRoute(l.Chicago, l.Atlanta),\n    createRoute(l.Chicago, l.Montreal),\n    createRoute(l.Atlanta, l.Miami),\n    createRoute(l.Atlanta, l.Washington),\n    createRoute(l.Montreal, l.New_York),\n    createRoute(l.Montreal, l.Washington),\n    createRoute(l.Washington, l.Miami),\n    createRoute(l.Washington, l.New_York),\n    createRoute(l.New_York, l.London),\n    createRoute(l.New_York, l.Madrid),\n    createRoute(l.Madrid, l.London),\n    createRoute(l.Madrid, l.Paris),\n    createRoute(l.Madrid, l.Algiers),\n    createRoute(l.Madrid, l.Sao_Paulo),\n    createRoute(l.London, l.Paris),\n    createRoute(l.London, l.Essen),\n    createRoute(l.Paris, l.Essen),\n    createRoute(l.Paris, l.Milan),\n    createRoute(l.Paris, l.Algiers),\n    createRoute(l.Essen, l.Milan),\n    createRoute(l.Essen, l.St_Petersburg),\n    createRoute(l.Milan, l.Istanbul),\n    createRoute(l.St_Petersburg, l.Moscow),\n    createRoute(l.St_Petersburg, l.Istanbul),\n    createRoute(l.Los_Angeles, l.Sydney, true),\n    createRoute(l.Los_Angeles, l.Mexico_City),\n    createRoute(l.Mexico_City, l.Miami),\n    createRoute(l.Mexico_City, l.Bogota),\n    createRoute(l.Mexico_City, l.Lima),\n    createRoute(l.Lima, l.Santiago),\n    createRoute(l.Lima, l.Bogota),\n    createRoute(l.Miami, l.Bogota),\n    createRoute(l.Bogota, l.Sao_Paulo),\n    createRoute(l.Bogota, l.Buenos_Aires),\n    createRoute(l.Buenos_Aires, l.Sao_Paulo),\n    createRoute(l.Lagos, l.Sao_Paulo),\n    createRoute(l.Lagos, l.Kinshasa),\n    createRoute(l.Lagos, l.Khartoum),\n    createRoute(l.Kinshasa, l.Khartoum),\n    createRoute(l.Kinshasa, l.Johannesburg),\n    createRoute(l.Khartoum, l.Johannesburg),\n    createRoute(l.Khartoum, l.Cairo),\n    createRoute(l.Algiers, l.Cairo),\n    createRoute(l.Algiers, l.Istanbul),\n    createRoute(l.Istanbul, l.Cairo),\n    createRoute(l.Istanbul, l.Baghdad),\n    createRoute(l.Istanbul, l.Moscow),\n    createRoute(l.Cairo, l.Baghdad),\n    createRoute(l.Cairo, l.Riyadh),\n    createRoute(l.Baghdad, l.Riyadh),\n    createRoute(l.Baghdad, l.Tehran),\n    createRoute(l.Baghdad, l.Karachi),\n    createRoute(l.Moscow, l.Tehran),\n    createRoute(l.Tehran, l.Karachi),\n    createRoute(l.Tehran, l.Delhi),\n    createRoute(l.Karachi, l.Riyadh),\n    createRoute(l.Karachi, l.Delhi),\n    createRoute(l.Karachi, l.Mumbai),\n    createRoute(l.Delhi, l.Mumbai),\n    createRoute(l.Delhi, l.Kolkata),\n    createRoute(l.Delhi, l.Chennai),\n    createRoute(l.Chennai, l.Mumbai),\n    createRoute(l.Chennai, l.Kolkata),\n    createRoute(l.Chennai, l.Bangkok),\n    createRoute(l.Chennai, l.Jakarta),\n    createRoute(l.Kolkata, l.Bangkok),\n    createRoute(l.Kolkata, l.Hong_Kong),\n    createRoute(l.Hong_Kong, l.Bangkok),\n    createRoute(l.Hong_Kong, l.Ho_Chi_Minh_City),\n    createRoute(l.Hong_Kong, l.Manila),\n    createRoute(l.Hong_Kong, l.Taipei),\n    createRoute(l.Hong_Kong, l.Shanghai),\n    createRoute(l.Bangkok, l.Ho_Chi_Minh_City),\n    createRoute(l.Bangkok, l.Jakarta),\n    createRoute(l.Jakarta, l.Ho_Chi_Minh_City),\n    createRoute(l.Jakarta, l.Sydney),\n    createRoute(l.Ho_Chi_Minh_City, l.Manila),\n    createRoute(l.Manila, l.Sydney),\n    createRoute(l.Manila, l.Taipei),\n    createRoute(l.Shanghai, l.Taipei),\n    createRoute(l.Shanghai, l.Beijing),\n    createRoute(l.Shanghai, l.Seoul),\n    createRoute(l.Shanghai, l.Tokyo),\n    createRoute(l.Taipei, l.Osaka),\n    createRoute(l.Tokyo, l.Osaka),\n    createRoute(l.Seoul, l.Tokyo),\n    createRoute(l.Seoul, l.Beijing),\n  ];\n};\n\nexport const createPandemicBaseResourceDictionary = () => {\n  let id = 1;\n  const baseResource = () => {\n    return {\n      __typename: 'Resource',\n      id: `resource-${id++}`,\n      persistanceLevel: PersistanceLevel.ALWAYS,\n    };\n  };\n  const Blue_Disease_Cubes: Resource = {\n    ...baseResource(),\n    name: 'Blue Disease Cubes',\n    stockCount: 24,\n  };\n  const Red_Disease_Cubes: Resource = {\n    ...baseResource(),\n    name: 'Red Disease Cubes',\n    stockCount: 24,\n  };\n  const Yellow_Disease_Cubes: Resource = {\n    ...baseResource(),\n    name: 'Yellow Disease Cubes',\n    stockCount: 24,\n  };\n  const Black_Disease_Cubes: Resource = {\n    ...baseResource(),\n    name: 'Black Disease Cubes',\n    stockCount: 24,\n  };\n  const Research_Stations: Resource = {\n    ...baseResource(),\n    name: 'Research Stations',\n    stockCount: 6,\n  };\n  return {\n    Blue_Disease_Cubes,\n    Red_Disease_Cubes,\n    Yellow_Disease_Cubes,\n    Black_Disease_Cubes,\n    Research_Stations,\n  };\n};\n\nexport const createPandemicBaseActionDictionary = () => {\n  let id = 1;\n  const baseAction = () => {\n    return {\n      __typename: 'Trait',\n      id: `trait-${id++}`,\n      persistanceLevel: PersistanceLevel.ALWAYS,\n      type: TraitType.PLAYER,\n    };\n  };\n  const Drive_Ferry: Trait = {\n    ...baseAction(),\n    name: 'Drive / Ferry',\n    description:\n      'Move to a city connected by a white line to the one you are in.',\n  };\n  const Direct_Flight: Trait = {\n    ...baseAction(),\n    name: 'Direct Flight',\n    description: 'Discard a City card to move to the city named on the card.',\n  };\n  const Charter_Flight: Trait = {\n    ...baseAction(),\n    name: 'Charter Flight',\n    description:\n      'Discard a City card that matches the city you are in to move to any city.',\n  };\n  const Shuttle_Flight: Trait = {\n    ...baseAction(),\n    name: 'Shuttle Flight',\n    description:\n      'Move from a city with a research station to any other city that has a research station.',\n  };\n  const Build_A_Research_Station: Trait = {\n    ...baseAction(),\n    name: 'Build A Research Station',\n    description:\n      'Discard the City card that matches the city you are in to place a research station there.',\n  };\n  const Treat_Disease: Trait = {\n    ...baseAction(),\n    name: 'Treat Disease',\n    description:\n      'Remove 1 disease cube from the city you are in. ' +\n      'If this color is cured, remove all cubes of that color from the city.',\n  };\n  const Share_Knowledge: Trait = {\n    ...baseAction(),\n    name: 'Share Knowledge',\n    description:\n      'Either: give the card that matches the city you are in to another player, ' +\n      'or take that card from another player. The other player must also be in the city with you.',\n  };\n  const Discover_A_Cure: Trait = {\n    ...baseAction(),\n    name: 'Discover A Cure',\n    description:\n      'At any research station, discard 5 City cards of the same disease color to cure that disease.',\n  };\n  return {\n    Drive_Ferry,\n    Direct_Flight,\n    Charter_Flight,\n    Shuttle_Flight,\n    Build_A_Research_Station,\n    Treat_Disease,\n    Share_Knowledge,\n    Discover_A_Cure,\n  };\n};\n\nexport const createPandemicBaseObjectiveList = () => {\n  let id = 1;\n  const baseObjective = () => {\n    return {\n      __typename: 'Objective',\n      id: `objective-${id++}`,\n      persistanceLevel: PersistanceLevel.ALWAYS,\n    };\n  };\n  const Objective1 = {\n    ...baseObjective(),\n    description: 'Discover cures to the 4 diseases.',\n    isMandatory: true,\n    isComplete: false,\n  };\n  return [Objective1];\n};\n\nexport const createPandemicBasePlayerCardList = (\n  locationDictionary: LocationDictionary\n) => {\n  let id = 1;\n  const basePlayerCard = () => {\n    return {\n      __typename: 'PlayerCard',\n      id: `player_card-${id++}`,\n      persistanceLevel: PersistanceLevel.ALWAYS,\n      traits: [],\n      tags: [],\n      location: {\n        __typename: 'Location',\n        color: LocationColor.MISC,\n        id: `location-${id++}`,\n        persistanceLevel: PersistanceLevel.ALWAYS,\n        resourcePiles: [],\n        tags: [],\n        name: '',\n        position: { x: 0, y: 0, __typename: 'Position' },\n      },\n      description: '',\n      name: '',\n    };\n  };\n  const createEpidemicPlayerCards = () => {\n    const epidemicPlayerCards = [1, 2, 3, 4, 5, 6].map(() => {\n      return {\n        ...basePlayerCard(),\n        type: PlayerCardType.EPIDEMIC,\n        name: 'Epidemic',\n      };\n    });\n    return epidemicPlayerCards;\n  };\n  const createLocationPlayerCards = () => {\n    const baseLocationPlayerCard = () => {\n      return {\n        ...basePlayerCard(),\n        type: PlayerCardType.LOCATION,\n      };\n    };\n    const locationPlayerCards = Object.keys(locationDictionary).map(key => {\n      const location = locationDictionary[key];\n      return {\n        ...baseLocationPlayerCard(),\n        name: location.name,\n        location,\n      };\n    });\n    return locationPlayerCards;\n  };\n  const createEventPlayerCards = () => {\n    const baseEventPlayerCard = () => {\n      return {\n        ...basePlayerCard(),\n        type: PlayerCardType.EVENT,\n      };\n    };\n    const Resilient_Population = {\n      ...baseEventPlayerCard(),\n      name: 'Resilient_Population',\n      description:\n        'Remove any 1 card in the Infection Discard Pile from the game. ' +\n        'You may play this between the Infect and Intensify steps of an epidemic.',\n    };\n    const One_Quiet_Night = {\n      ...baseEventPlayerCard(),\n      name: 'One Quiet Night',\n      description:\n        'Skip the next Infect Cities step (do not flip over any Infection cards).',\n    };\n    const Forecast = {\n      ...baseEventPlayerCard(),\n      name: 'Forecast',\n      description:\n        'Draw, look at, and rearrange the top 6 cards of the Infection Deck. Put them back on top.',\n    };\n    const Airlift = {\n      ...baseEventPlayerCard(),\n      name: 'Airlift',\n      description:\n        \"Move any 1 pawn to any city. Get permission before moving another player's pawn.\",\n    };\n    const Government_Grant = {\n      ...baseEventPlayerCard(),\n      name: 'Government Grant',\n      description: 'Add 1 research station to any city (no City card needed).',\n    };\n    return [\n      Resilient_Population,\n      One_Quiet_Night,\n      Forecast,\n      Airlift,\n      Government_Grant,\n    ];\n  };\n  return [\n    ...createEpidemicPlayerCards(),\n    ...createLocationPlayerCards(),\n    ...createEventPlayerCards(),\n  ];\n};\n\nexport const createPandemicBaseTagList = () => {\n  let id = 1;\n  const baseTag = () => {\n    return {\n      __typename: 'Tag',\n      id: `tag-${id++}`,\n      persistanceLevel: PersistanceLevel.ALWAYS,\n    };\n  };\n  return [\n    { ...baseTag(), name: 'Blue Disease Status', description: 'Not Cured' },\n    { ...baseTag(), name: 'Red Disease Status', description: 'Not Cured' },\n    { ...baseTag(), name: 'Yellow Disease Status', description: 'Not Cured' },\n    { ...baseTag(), name: 'Black Disease Status', description: 'Not Cured' },\n    { ...baseTag(), name: 'Current Infection Rate', description: '2' },\n  ];\n};\n\nexport const createPandemicBaseInfectionCardList = (\n  locationDictionary: LocationDictionary\n) => {\n  let id = 1;\n  const baseInfectionCard = () => {\n    return {\n      __typename: 'InfectionCard',\n      id: `infection_card-${id++}`,\n      persistanceLevel: PersistanceLevel.ALWAYS,\n      type: InfectionCardType.LOCATION,\n      description: '',\n      traits: [],\n      tags: [],\n    };\n  };\n  const infectionCards = Object.keys(locationDictionary).map(key => {\n    const location = locationDictionary[key];\n    return {\n      ...baseInfectionCard(),\n      name: location.name,\n      location,\n    };\n  });\n  return infectionCards;\n};\n\nexport const createPandemicBaseResourceStockpileList = (\n  resourceDictionary: ResourceDictionary\n) => {\n  let id = 1;\n  const baseResourcePile = () => {\n    return {\n      __typename: 'ResourcePile',\n      id: `resource_pile-${id++}`,\n      persistanceLevel: PersistanceLevel.ALWAYS,\n    };\n  };\n  return Object.keys(resourceDictionary).map(key => ({\n    ...baseResourcePile(),\n    resource: resourceDictionary[key],\n    count: resourceDictionary[key].stockCount,\n  }));\n};\n\nexport const createPandemicBaseBoardState = (\n  infectionCardList: InfectionCard[],\n  playerCardList: PlayerCard[],\n  playerDictionary: PlayerDictionary,\n  resourceDictionary: ResourceDictionary\n) => {\n  const emptyBoardState = createEmptyBoardState();\n  const objectiveList = createPandemicBaseObjectiveList();\n  const tagList = createPandemicBaseTagList();\n  const resourceStockpileList = createPandemicBaseResourceStockpileList(\n    resourceDictionary\n  );\n  const boardState = {\n    ...emptyBoardState,\n    objectives: objectiveList,\n    players: [\n      // TODO(azinge): Clear this.\n      playerDictionary.Researcher,\n      playerDictionary.Scientist,\n      playerDictionary.Medic,\n      playerDictionary.Dispatcher,\n    ],\n    tags: tagList,\n    resourceStockpiles: resourceStockpileList,\n    infectionDeck: {\n      // TODO(azinge): Clear this.\n      ...emptyBoardState.infectionDeck,\n      drawPileStacks: [\n        {\n          __typename: 'InfectionDeckStack',\n          shuffledCards: [...infectionCardList],\n        },\n      ],\n    },\n    playerDeck: {\n      // TODO(azinge): Clear this.\n      ...emptyBoardState.playerDeck,\n      drawPileSizes: [8, 8, 8, 9, 9, 9],\n      drawPile: [...playerCardList],\n    },\n    infectionRate: 2,\n  };\n  return boardState;\n};\n\nexport const createPandemicBaseGameState = () => {\n  const convertDictionaryToValueList = (dictionary: { [key: string]: any }) =>\n    Object.keys(dictionary).map(key => dictionary[key]);\n  const playerDictionary = createPandemicBasePlayerDictionary();\n  const locationDictionary = createPandemicBaseLocationDictionary();\n  const actionDictionary = createPandemicBaseActionDictionary();\n  const resourceDictionary = createPandemicBaseResourceDictionary();\n\n  const playerCardList = createPandemicBasePlayerCardList(locationDictionary);\n  const routeList = createPandemicBaseRouteList(locationDictionary);\n  const infectionCardList = createPandemicBaseInfectionCardList(\n    locationDictionary\n  );\n\n  const gameState: GameState = {\n    __typename: 'GameState',\n    players: convertDictionaryToValueList(playerDictionary),\n    playerCards: playerCardList,\n    infectionCards: infectionCardList,\n    resources: convertDictionaryToValueList(resourceDictionary),\n    actions: convertDictionaryToValueList(actionDictionary),\n    mapState: {\n      ...createEmptyMapState(),\n      locations: convertDictionaryToValueList(locationDictionary),\n      routes: routeList,\n    },\n    boardState: createPandemicBaseBoardState(\n      infectionCardList,\n      playerCardList,\n      playerDictionary,\n      resourceDictionary\n    ),\n  };\n  return gameState;\n};\n","import { createPandemicBaseGameState } from './pandemic-presets';\nimport {\n  GameState,\n  InfectionCard,\n  PlayerCard,\n  Objective,\n  PersistanceLevel,\n  ResourcePile,\n  Tag,\n  Resource,\n  Trait,\n  TraitType,\n} from '../graphql/types';\nimport { oc } from 'ts-optchain';\nimport { parse, stringify } from 'flatted/esm';\nimport uniqid from 'uniqid';\n\nlet gameState: GameState = createPandemicBaseGameState();\n\nexport const getGameState = () => {\n  return gameState;\n};\n\ntype InfectionCardListMap = {\n  [key: string]: InfectionCard[];\n};\n\ntype PlayerCardListMap = {\n  [key: string]: PlayerCard[];\n};\n\nexport const saveInfectionDeck = (\n  srcDropId: string,\n  srcIndex: number,\n  dstDropId: string,\n  dstIndex: number\n) => {\n  const infectionDeck = oc(gameState).boardState.infectionDeck({});\n  const arrMap: InfectionCardListMap = {\n    Discard_Pile: oc(infectionDeck).discardPile([]),\n    Out_Of_Game_Pile: oc(infectionDeck).outOfGamePile([]),\n  };\n  oc(infectionDeck)\n    .drawPileStacks([])\n    .forEach((drawPileStack, index) => {\n      arrMap[`Draw_Pile_Stack:${index}`] = oc(drawPileStack).shuffledCards([]);\n    });\n  const a = arrMap[srcDropId].splice(srcIndex, 1)[0];\n  arrMap[dstDropId].splice(dstIndex, 0, a);\n  return gameState;\n};\n\nexport const savePlayerDeck = (\n  srcDropId: string,\n  srcIndex: number,\n  dstDropId: string,\n  dstIndex: number\n) => {\n  const playerDeck = oc(gameState).boardState.playerDeck({});\n  const arrMap: PlayerCardListMap = {\n    Draw_Pile: oc(playerDeck).drawPile([]),\n    Discard_Pile: oc(playerDeck).discardPile([]),\n    Out_Of_Game_Pile: oc(playerDeck).outOfGamePile([]),\n  };\n  oc(gameState)\n    .boardState.players([])\n    .forEach((player, index) => {\n      arrMap[`Player_Pile:${index}`] = oc(player).cards([]);\n    });\n  const a = arrMap[srcDropId].splice(srcIndex, 1)[0];\n  arrMap[dstDropId].splice(dstIndex, 0, a);\n  return gameState;\n};\n\nexport const createObjective = () => {\n  oc(gameState)\n    .boardState.objectives([])\n    .push({\n      __typename: 'Objective',\n      id: uniqid('objective-'),\n      persistanceLevel: PersistanceLevel.ALWAYS,\n      description: 'Enter Objective Description.',\n      isMandatory: false,\n      isComplete: false,\n    });\n};\n\nexport const updateObjective = (id: string, data: Objective) => {\n  const o = oc(gameState)\n    .boardState.objectives([])\n    .find(objective => objective.id === id);\n  if (!o) return;\n  Object.assign(o || {}, data);\n};\n\nexport const deleteObjective = (id: string) => {\n  const boardState = oc(gameState).boardState({});\n  boardState.objectives = oc(boardState)\n    .objectives([])\n    .filter(objective => {\n      return objective.id !== id;\n    });\n};\n\nexport const createResourceStockpile = () => {\n  const resourcePile = {\n    __typename: 'ResourcePile',\n    id: uniqid('resource_pile-'),\n    persistanceLevel: PersistanceLevel.ALWAYS,\n    resource: {\n      __typename: 'Resource',\n      id: uniqid('resource-'),\n      persistanceLevel: PersistanceLevel.ALWAYS,\n      name: 'Enter Resource Name.',\n      stockCount: 0,\n    },\n    count: 0,\n    tags: [],\n  };\n  oc(gameState)\n    .boardState.resourceStockpiles([])\n    .push(resourcePile);\n  oc(gameState)\n    .resources([])\n    .push(resourcePile.resource);\n};\n\nexport const updateResourceStockpile = (\n  id: string,\n  data: ResourcePile,\n  resourceData: Resource\n) => {\n  const o = oc(gameState)\n    .boardState.resourceStockpiles([])\n    .find(resourceStockpile => resourceStockpile.id === id);\n  if (!o) return;\n  Object.assign(o || {}, data);\n  Object.assign(o.resource, resourceData);\n};\n\nexport const deleteResourceStockpile = (id: string) => {\n  const boardState = oc(gameState).boardState({});\n  const rsp = oc(boardState)\n    .resourceStockpiles([])\n    .find(rsp => rsp.id === id);\n  boardState.resourceStockpiles = oc(boardState)\n    .resourceStockpiles([])\n    .filter(resourceStockpile => {\n      return resourceStockpile.id !== id;\n    });\n  gameState.resources = oc(gameState)\n    .resources([])\n    .filter(resource => {\n      return resource.id !== oc(rsp).resource.id(undefined);\n    });\n};\n\nexport const createGlobalTag = () => {\n  oc(gameState)\n    .boardState.tags([])\n    .push({\n      __typename: 'Tag',\n      id: uniqid('tag-'),\n      persistanceLevel: PersistanceLevel.ALWAYS,\n      name: 'Enter Tag Name.',\n      description: 'Enter Tag Description.',\n    });\n};\n\nexport const updateGlobalTag = (id: string, data: Tag) => {\n  const o = oc(gameState)\n    .boardState.tags([])\n    .find(tag => tag.id === id);\n  Object.assign(o || {}, data);\n};\n\nexport const deleteGlobalTag = (id: string) => {\n  const boardState = oc(gameState).boardState({});\n  boardState.tags = oc(boardState)\n    .tags([])\n    .filter(tag => {\n      return tag.id !== id;\n    });\n};\n\nexport const createNote = () => {\n  oc(gameState)\n    .boardState.notes([])\n    .push({\n      __typename: 'Note',\n      id: uniqid('note-'),\n      persistanceLevel: PersistanceLevel.ALWAYS,\n      description: 'Enter Note Description.',\n    });\n};\n\nexport const updateNote = (id: string, data: Tag) => {\n  const o = oc(gameState)\n    .boardState.notes([])\n    .find(note => note.id === id);\n  Object.assign(o || {}, data);\n};\n\nexport const deleteNote = (id: string) => {\n  const boardState = oc(gameState).boardState({});\n  boardState.notes = oc(boardState)\n    .notes([])\n    .filter(note => {\n      return note.id !== id;\n    });\n};\n\nexport const createGlobalAction = () => {\n  oc(gameState)\n    .actions([])\n    .push({\n      __typename: 'Action',\n      id: uniqid('action-'),\n      persistanceLevel: PersistanceLevel.ALWAYS,\n      name: 'Enter Action Name.',\n      description: 'Enter Action Description.',\n      type: TraitType.PLAYER,\n    });\n};\n\nexport const updateGlobalAction = (id: string, data: Trait) => {\n  const o = oc(gameState)\n    .actions([])\n    .find(action => action.id === id);\n  Object.assign(o || {}, data);\n};\n\nexport const deleteGlobalAction = (id: string) => {\n  gameState.actions = oc(gameState)\n    .actions([])\n    .filter(action => {\n      return action.id !== id;\n    });\n};\n\nexport const createInfectionDeckStack = () => {\n  oc(gameState)\n    .boardState.infectionDeck.drawPileStacks([])\n    .unshift({\n      __typename: 'InfectionDeckStack',\n      shuffledCards: [],\n    });\n};\n\nexport const deleteInfectionDeckStack = (index: number) => {\n  console.log();\n  const infectionDeck = oc(gameState).boardState.infectionDeck({});\n  infectionDeck.drawPileStacks = oc(infectionDeck)\n    .drawPileStacks([])\n    .filter((a, i) => {\n      return i !== index;\n    });\n};\n\nexport const updateLocationPosition = (id: string, x: number, y: number) => {\n  const o = oc(gameState)\n    .mapState.locations([])\n    .find(location => location.id === id);\n  const position = oc(o).position({});\n  Object.assign(position || {}, { x, y });\n};\n\nexport const saveGameState = () => {\n  window.localStorage.setItem('game-state', stringify(gameState));\n};\n\nexport const loadGameState = () => {\n  const temp = window.localStorage.getItem('game-state');\n  if (temp === null) return;\n  gameState = parse(temp);\n};\n","import {\n  getGameState,\n  saveInfectionDeck,\n  savePlayerDeck,\n  updateObjective,\n  createObjective,\n  deleteObjective,\n  createResourceStockpile,\n  updateResourceStockpile,\n  deleteResourceStockpile,\n  createGlobalTag,\n  updateGlobalTag,\n  deleteGlobalTag,\n  createNote,\n  updateNote,\n  deleteNote,\n  createGlobalAction,\n  updateGlobalAction,\n  deleteGlobalAction,\n  createInfectionDeckStack,\n  deleteInfectionDeckStack,\n  updateLocationPosition,\n} from '../utils/store';\n\nexport const resolvers = {\n  Query: {\n    gameState: (_root: any, variables: any, client: any) => {\n      return getGameState();\n    },\n  },\n  Mutation: {\n    saveInfectionDeck: (_root: any, variables: any, client: any) => {\n      saveInfectionDeck(\n        variables.srcDropId,\n        variables.srcIndex,\n        variables.dstDropId,\n        variables.dstIndex\n      );\n      return getGameState();\n    },\n    savePlayerDeck: (_root: any, variables: any, client: any) => {\n      savePlayerDeck(\n        variables.srcDropId,\n        variables.srcIndex,\n        variables.dstDropId,\n        variables.dstIndex\n      );\n      return getGameState();\n    },\n    createObjective: (_root: any, variables: any, client: any) => {\n      createObjective();\n      return getGameState();\n    },\n    updateObjective: (_root: any, variables: any, client: any) => {\n      updateObjective(variables.id, variables.data);\n      return getGameState();\n    },\n    deleteObjective: (_root: any, variables: any, client: any) => {\n      deleteObjective(variables.id);\n      return getGameState();\n    },\n\n    createResourceStockpile: (_root: any, variables: any, client: any) => {\n      createResourceStockpile();\n      return getGameState();\n    },\n    updateResourceStockpile: (_root: any, variables: any, client: any) => {\n      updateResourceStockpile(\n        variables.id,\n        variables.data,\n        variables.resourceData\n      );\n      return getGameState();\n    },\n    deleteResourceStockpile: (_root: any, variables: any, client: any) => {\n      deleteResourceStockpile(variables.id);\n      return getGameState();\n    },\n\n    createGlobalTag: (_root: any, variables: any, client: any) => {\n      createGlobalTag();\n      return getGameState();\n    },\n    updateGlobalTag: (_root: any, variables: any, client: any) => {\n      updateGlobalTag(variables.id, variables.data);\n      return getGameState();\n    },\n    deleteGlobalTag: (_root: any, variables: any, client: any) => {\n      deleteGlobalTag(variables.id);\n      return getGameState();\n    },\n\n    createNote: (_root: any, variables: any, client: any) => {\n      createNote();\n      return getGameState();\n    },\n    updateNote: (_root: any, variables: any, client: any) => {\n      updateNote(variables.id, variables.data);\n      return getGameState();\n    },\n    deleteNote: (_root: any, variables: any, client: any) => {\n      deleteNote(variables.id);\n      return getGameState();\n    },\n\n    createGlobalAction: (_root: any, variables: any, client: any) => {\n      createGlobalAction();\n      return getGameState();\n    },\n    updateGlobalAction: (_root: any, variables: any, client: any) => {\n      updateGlobalAction(variables.id, variables.data);\n      return getGameState();\n    },\n    deleteGlobalAction: (_root: any, variables: any, client: any) => {\n      deleteGlobalAction(variables.id);\n      return getGameState();\n    },\n\n    createInfectionDeckStack: (_root: any, variables: any, client: any) => {\n      createInfectionDeckStack();\n      return getGameState();\n    },\n    deleteInfectionDeckStack: (_root: any, variables: any, client: any) => {\n      deleteInfectionDeckStack(variables.index);\n      return getGameState();\n    },\n\n    updateLocationPosition: (_root: any, variables: any, client: any) => {\n      updateLocationPosition(variables.id, variables.x, variables.y);\n      return getGameState();\n    },\n  },\n};\n","import ApolloClient from 'apollo-boost';\nimport { resolvers } from './resolvers';\n\nconst client = new ApolloClient({\n  uri: 'https://48p1r2roz4.sse.codesandbox.io',\n  resolvers: resolvers,\n});\nclient.defaultOptions = {\n  watchQuery: {\n    fetchPolicy: 'cache-and-network',\n    errorPolicy: 'all',\n  },\n  query: {\n    fetchPolicy: 'no-cache',\n  },\n};\n\nexport default client;\n","import { gql } from 'apollo-boost';\n\nexport const GET_INFECTION_DECK = gql`\n  query GET_INFECTION_DECK {\n    gameState @client(always: true) {\n      boardState {\n        infectionDeck {\n          drawPileStacks {\n            shuffledCards {\n              id\n              name\n              location {\n                color\n              }\n            }\n          }\n          discardPile {\n            id\n            name\n            location {\n              color\n            }\n          }\n          outOfGamePile {\n            id\n            name\n            location {\n              color\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const SAVE_INFECTION_DECK = gql`\n  mutation SAVE_INFECTION_DECK(\n    $srcDropId: String\n    $srcIndex: Int\n    $dstDropId: String\n    $dstIndex: Int\n  ) {\n    saveInfectionDeck(\n      srcDropId: $srcDropId\n      srcIndex: $srcIndex\n      dstDropId: $dstDropId\n      dstIndex: $dstIndex\n    ) @client {\n      boardState {\n        infectionDeck {\n          drawPileStacks {\n            shuffledCards {\n              id\n              name\n              location {\n                color\n              }\n            }\n          }\n          discardPile {\n            id\n            name\n            location {\n              color\n            }\n          }\n          outOfGamePile {\n            id\n            name\n            location {\n              color\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const CREATE_INFECTION_DECK_STACK = gql`\n  mutation CREATE_INFECTION_DECK_STACK {\n    createInfectionDeckStack @client\n  }\n`;\n\nexport const DELETE_INFECTION_DECK_STACK = gql`\n  mutation DELETE_INFECTION_DECK_STACK($index: Int) {\n    deleteInfectionDeckStack(index: $index) @client\n  }\n`;\n","import { LocationColor } from '../graphql/types';\n\nexport const getHexColorFromLocationColor = (locationColor: LocationColor) => {\n  switch (locationColor) {\n    case LocationColor.BLACK:\n      return 'black';\n    case LocationColor.YELLOW:\n      return 'yellow';\n    case LocationColor.RED:\n      return 'red';\n    case LocationColor.BLUE:\n      return 'blue';\n    default:\n      return 'white';\n  }\n};\n\nexport const getLightHexColorFromLocationColor = (\n  locationColor: LocationColor\n) => {\n  switch (locationColor) {\n    case LocationColor.BLACK:\n      return 'grey';\n    case LocationColor.YELLOW:\n      return 'yellow';\n    case LocationColor.RED:\n      return 'pink';\n    case LocationColor.BLUE:\n      return 'lightblue';\n    default:\n      return 'white';\n  }\n};\n","/**\n * InfectionDeckModal\n */\n\nimport * as React from 'react';\n\n// eslint-disable-next-line\nimport styles from './InfectionDeckModal.styles';\nimport Modal from 'react-modal';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport {\n  InfectionCard,\n  InfectionDeck,\n  LocationColor,\n  InfectionDeckStack,\n} from '../../../../graphql/types';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport {\n  GET_INFECTION_DECK,\n  SAVE_INFECTION_DECK,\n  CREATE_INFECTION_DECK_STACK,\n  DELETE_INFECTION_DECK_STACK,\n} from '../../views/InfectionDeckView/InfectionDeckView.requests';\nimport { oc } from 'ts-optchain';\nimport { getLightHexColorFromLocationColor } from '../../../../utils/view-logic';\nimport { useCallback } from 'react';\n\nexport interface Props {\n  closeModal: () => void;\n  isOpen: boolean;\n}\n\nconst createInfectionCard = (card: InfectionCard, index: number) => {\n  if (oc(card).id('1') === '1') console.log(card);\n  return (\n    <Draggable\n      draggableId={oc(card).id('1')}\n      index={index}\n      key={oc(card).id('1')}\n    >\n      {(provided, snapshot) => {\n        return (\n          <div\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n          >\n            <div\n              style={{\n                backgroundColor: getLightHexColorFromLocationColor(\n                  oc(card).location.color(LocationColor.MISC)\n                ),\n                height: 25,\n                width: 500,\n                color: 'black',\n              }}\n            >\n              {card.name}\n            </div>\n          </div>\n        );\n      }}\n    </Draggable>\n  );\n};\n\nconst createDrawPileStacks = (\n  drawPileStacks: InfectionDeckStack[],\n  deleteInfectionDeckStack: (index: number) => void\n) => {\n  return drawPileStacks.map((drawPileStack, index) => (\n    <Droppable\n      droppableId={`Draw_Pile_Stack:${index}`}\n      type={'INFECTION_CARD'}\n      key={`${index}`}\n    >\n      {(provided, snapshot) => (\n        <div\n          ref={provided.innerRef}\n          style={{\n            minHeight: 50,\n            borderStyle: 'solid',\n            borderColor: 'grey',\n          }}\n          {...provided.droppableProps}\n        >\n          {oc(drawPileStack)\n            .shuffledCards([])\n            .map((card, index) => {\n              return createInfectionCard(card, index);\n            })}\n          {provided.placeholder}\n          <button onClick={() => deleteInfectionDeckStack(index)}>\n            delete stack\n          </button>\n        </div>\n      )}\n    </Droppable>\n  ));\n};\n\nModal.setAppElement('#root');\nconst InfectionDeckModal: React.FC<Props> = (props: Props) => {\n  const [saveInfectionDeck] = useMutation(SAVE_INFECTION_DECK, {\n    refetchQueries: () => ['GET_INFECTION_DECK'],\n  });\n  const [createInfectionDeckStack] = useMutation(CREATE_INFECTION_DECK_STACK, {\n    refetchQueries: () => ['GET_INFECTION_DECK'],\n  });\n  const [deleteInfectionDeckStack] = useMutation(DELETE_INFECTION_DECK_STACK, {\n    refetchQueries: () => ['GET_INFECTION_DECK'],\n  });\n  const { data } = useQuery(GET_INFECTION_DECK, {\n    fetchPolicy: 'no-cache',\n  });\n  const infectionDeck: InfectionDeck = oc(\n    data\n  ).gameState.boardState.infectionDeck({});\n  const drawPileStacks = oc(infectionDeck).drawPileStacks([]);\n\n  const onDragEnd = useCallback(\n    (result, provided) => {\n      if (result.destination === null) return;\n      saveInfectionDeck({\n        variables: {\n          srcDropId: result.source.droppableId,\n          srcIndex: result.source.index,\n          dstDropId: result.destination.droppableId,\n          dstIndex: result.destination.index,\n        },\n      });\n    },\n    [saveInfectionDeck]\n  );\n\n  const droppableDict = {\n    Discard_Pile: oc(infectionDeck).discardPile([]),\n    Out_Of_Game_Pile: oc(infectionDeck).outOfGamePile([]),\n  };\n\n  return (\n    <Modal\n      isOpen={props.isOpen}\n      onRequestClose={props.closeModal}\n      contentLabel='Players'\n    >\n      <div>\n        <h1>InfectionDeckModal</h1>\n        <button onClick={props.closeModal}>close modal</button>\n        <DragDropContext onDragEnd={onDragEnd}>\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'row',\n              // overflowY: 'scroll',\n            }}\n          >\n            <div\n              style={{\n                flex: 1,\n                borderStyle: 'solid',\n                margin: 5,\n                padding: 5,\n                flexDirection: 'column',\n                display: 'flex',\n              }}\n            >\n              Draw Pile\n              <button\n                onClick={() => {\n                  createInfectionDeckStack();\n                }}\n              >\n                Create Draw Stack\n              </button>\n              {createDrawPileStacks(drawPileStacks, (index: number) => {\n                deleteInfectionDeckStack({ variables: { index } });\n              })}\n            </div>\n            <div\n              style={{\n                flex: 1,\n                display: 'flex',\n                flexDirection: 'column',\n              }}\n            >\n              <div\n                style={{\n                  flex: 1,\n                  borderStyle: 'solid',\n                  margin: 5,\n                  padding: 5,\n                  flexDirection: 'column',\n                  display: 'flex',\n                }}\n              >\n                Discard Pile\n                <Droppable droppableId={'Discard_Pile'} type={'INFECTION_CARD'}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      style={{\n                        minHeight: 50,\n                        borderStyle: 'solid',\n                        borderColor: 'grey',\n                        flex: 1,\n                      }}\n                      {...provided.droppableProps}\n                    >\n                      {droppableDict['Discard_Pile'].map((card, index) => {\n                        return createInfectionCard(card, index);\n                      })}\n                      {provided.placeholder}\n                    </div>\n                  )}\n                </Droppable>\n              </div>\n              <div\n                style={{\n                  flex: 1,\n                  borderStyle: 'solid',\n                  margin: 5,\n                  padding: 5,\n                  flexDirection: 'column',\n                  display: 'flex',\n                }}\n              >\n                Out of Game Pile\n                <Droppable\n                  droppableId={'Out_Of_Game_Pile'}\n                  type={'INFECTION_CARD'}\n                >\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      style={{\n                        minHeight: 50,\n                        borderStyle: 'solid',\n                        borderColor: 'grey',\n                        flex: 1,\n                      }}\n                      {...provided.droppableProps}\n                    >\n                      {droppableDict['Out_Of_Game_Pile'].map((card, index) => {\n                        return createInfectionCard(card, index);\n                      })}\n                      {provided.placeholder}\n                    </div>\n                  )}\n                </Droppable>\n              </div>\n            </div>\n          </div>\n        </DragDropContext>\n      </div>\n    </Modal>\n  );\n};\n\nexport default InfectionDeckModal;\n","import InfectionDeckModal from './InfectionDeckModal';\nexport default InfectionDeckModal;\n","import { gql } from 'apollo-boost';\n\nexport const GET_PLAYER_DECK = gql`\n  query GET_PLAYER_DECK {\n    gameState @client(always: true) {\n      boardState {\n        players {\n          id\n          name\n          cards {\n            id\n            name\n            type\n            location {\n              color\n            }\n          }\n        }\n        playerDeck {\n          drawPile {\n            id\n            name\n            type\n            location {\n              color\n            }\n          }\n          drawPileSizes\n          discardPile {\n            id\n            name\n            type\n            location {\n              color\n            }\n          }\n          outOfGamePile {\n            id\n            name\n            type\n            location {\n              color\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const SAVE_PLAYER_DECK = gql`\n  mutation SAVE_PLAYER_DECK(\n    $srcDropId: String\n    $srcIndex: Int\n    $dstDropId: String\n    $dstIndex: Int\n  ) {\n    savePlayerDeck(\n      srcDropId: $srcDropId\n      srcIndex: $srcIndex\n      dstDropId: $dstDropId\n      dstIndex: $dstIndex\n    ) @client {\n      boardState {\n        playerDeck {\n          drawPile {\n            id\n            name\n            type\n            location {\n              color\n            }\n          }\n          drawPileSizes\n          discardPile {\n            id\n            name\n            type\n            location {\n              color\n            }\n          }\n          outOfGamePile {\n            id\n            name\n            type\n            location {\n              color\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","/**\n * PlayerDeckModal\n */\n\nimport * as React from 'react';\n\n// eslint-disable-next-line\nimport styles from './PlayerDeckModal.styles';\nimport Modal from 'react-modal';\nimport {\n  PlayerCard,\n  LocationColor,\n  PlayerDeck,\n  Player,\n} from '../../../../graphql/types';\nimport { oc } from 'ts-optchain';\nimport { Draggable, DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { getLightHexColorFromLocationColor } from '../../../../utils/view-logic';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport {\n  GET_PLAYER_DECK,\n  SAVE_PLAYER_DECK,\n} from '../../views/PlayerDeckView/PlayerDeckView.requests';\n\nexport interface Props {\n  closeModal: () => void;\n  isOpen: boolean;\n}\n\nconst createPlayerCard = (card: PlayerCard, index: number) => {\n  return (\n    <Draggable\n      draggableId={oc(card).id('1')}\n      index={index}\n      key={oc(card).id('1')}\n    >\n      {(provided, snapshot) => {\n        return (\n          <div\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n          >\n            <div\n              style={{\n                backgroundColor: getLightHexColorFromLocationColor(\n                  oc(card).location.color(LocationColor.MISC)\n                ),\n                height: 25,\n                width: 500,\n              }}\n            >\n              {card.name}\n            </div>\n          </div>\n        );\n      }}\n    </Draggable>\n  );\n};\n\nconst createPlayerHands = (players: Player[]) => {\n  return players.map((player, index) => (\n    <Droppable\n      droppableId={`Player_Pile:${index}`}\n      type={'PLAYER_CARD'}\n      key={oc(player).id('1')}\n    >\n      {(provided, snapshot) => (\n        <div\n          ref={provided.innerRef}\n          style={{\n            minHeight: 50,\n            borderStyle: 'solid',\n            borderColor: 'grey',\n            flex: 1,\n          }}\n          {...provided.droppableProps}\n        >\n          {player.name}\n          {oc(player)\n            .cards([])\n            .map((card, index) => {\n              return createPlayerCard(card, index);\n            })}\n          {provided.placeholder}\n        </div>\n      )}\n    </Droppable>\n  ));\n};\n\nModal.setAppElement('#root');\nconst PlayerDeckModal: React.FC<Props> = (props: Props) => {\n  const [savePlayerDeck] = useMutation(SAVE_PLAYER_DECK, {\n    refetchQueries: () => ['GET_PLAYER_DECK'],\n  });\n  const { data } = useQuery(GET_PLAYER_DECK, {\n    fetchPolicy: 'no-cache',\n  });\n\n  const onDragEnd = React.useCallback(\n    (result, provided) => {\n      if (result.destination === null) return;\n      savePlayerDeck({\n        variables: {\n          srcDropId: result.source.droppableId,\n          srcIndex: result.source.index,\n          dstDropId: result.destination.droppableId,\n          dstIndex: result.destination.index,\n        },\n      });\n    },\n    [savePlayerDeck]\n  );\n\n  const playerDeck: PlayerDeck = oc(data).gameState.boardState.playerDeck();\n  const droppableDict = {\n    Draw_Pile: oc(playerDeck).drawPile([]),\n    Discard_Pile: oc(playerDeck).discardPile([]),\n    Out_Of_Game_Pile: oc(playerDeck).outOfGamePile([]),\n  };\n  const players = oc(data).gameState.boardState.players([]);\n  return (\n    <Modal\n      isOpen={props.isOpen}\n      onRequestClose={props.closeModal}\n      contentLabel='Players'\n    >\n      <div>\n        <h1>PlayerDeckModal</h1>\n        <button onClick={props.closeModal}>close modal</button>\n        <DragDropContext onDragEnd={onDragEnd}>\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'row',\n              // overflowY: 'scroll',\n            }}\n          >\n            <div\n              style={{\n                flex: 1,\n                borderStyle: 'solid',\n                margin: 5,\n                padding: 5,\n                flexDirection: 'column',\n                display: 'flex',\n              }}\n            >\n              Draw Pile\n              <Droppable droppableId={'Draw_Pile'} type={'PLAYER_CARD'}>\n                {(provided, snapshot) => (\n                  <div\n                    ref={provided.innerRef}\n                    style={{\n                      minHeight: 50,\n                      borderStyle: 'solid',\n                      borderColor: 'grey',\n                      flex: 1,\n                    }}\n                    {...provided.droppableProps}\n                  >\n                    {droppableDict['Draw_Pile'].map((card, index) => {\n                      return createPlayerCard(card, index);\n                    })}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </div>\n            <div\n              style={{\n                flex: 1,\n                display: 'flex',\n                flexDirection: 'column',\n              }}\n            >\n              <div\n                style={{\n                  flex: 1,\n                  borderStyle: 'solid',\n                  margin: 5,\n                  padding: 5,\n                  flexDirection: 'column',\n                  display: 'flex',\n                }}\n              >\n                Players\n                {createPlayerHands(players)}\n              </div>\n            </div>\n            <div\n              style={{\n                flex: 1,\n                display: 'flex',\n                flexDirection: 'column',\n              }}\n            >\n              <div\n                style={{\n                  flex: 1,\n                  borderStyle: 'solid',\n                  margin: 5,\n                  padding: 5,\n                  flexDirection: 'column',\n                  display: 'flex',\n                }}\n              >\n                Discard Pile\n                <Droppable droppableId={'Discard_Pile'} type={'PLAYER_CARD'}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      style={{\n                        minHeight: 50,\n                        borderStyle: 'solid',\n                        borderColor: 'grey',\n                        flex: 1,\n                      }}\n                      {...provided.droppableProps}\n                    >\n                      {droppableDict['Discard_Pile'].map((card, index) => {\n                        return createPlayerCard(card, index);\n                      })}\n                      {provided.placeholder}\n                    </div>\n                  )}\n                </Droppable>\n              </div>\n              <div\n                style={{\n                  flex: 1,\n                  borderStyle: 'solid',\n                  margin: 5,\n                  padding: 5,\n                  flexDirection: 'column',\n                  display: 'flex',\n                }}\n              >\n                Out of Game Pile\n                <Droppable\n                  droppableId={'Out_Of_Game_Pile'}\n                  type={'PLAYER_CARD'}\n                >\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      style={{\n                        minHeight: 50,\n                        borderStyle: 'solid',\n                        borderColor: 'grey',\n                        flex: 1,\n                      }}\n                      {...provided.droppableProps}\n                    >\n                      {droppableDict['Out_Of_Game_Pile'].map((card, index) => {\n                        return createPlayerCard(card, index);\n                      })}\n                      {provided.placeholder}\n                    </div>\n                  )}\n                </Droppable>\n              </div>\n            </div>\n          </div>\n        </DragDropContext>\n      </div>\n    </Modal>\n  );\n};\n\nexport default PlayerDeckModal;\n","import PlayerDeckModal from './PlayerDeckModal';\nexport default PlayerDeckModal;\n","import AlertSettingsPanel from './AlertSettingsPanel';\nexport default AlertSettingsPanel;\n","/**\n * AlertSettingsPanel\n */\n\nimport * as React from 'react';\n\n// eslint-disable-next-line\nimport styles from './AlertSettingsPanel.styles';\nimport { Tag } from '../../../../../graphql/types';\n\nexport interface Props {}\n\nconst AlertSettingsPanel: React.FC<Props> = (props: Props) => {\n  const alerts: Tag[] = [{ id: 'test', description: 'New Mexico at risk!' }];\n  return (\n    <div>\n      <h1>AlertSettingsPanel</h1>\n      <h2 style={{ textAlign: 'center', fontSize: 15 }}>Alerts:</h2>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n        }}\n      >\n        <div>\n          {alerts.map(alert => (\n            <div key={alert.id}>{alert.description}</div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AlertSettingsPanel;\n","import { gql } from 'apollo-boost';\n\nexport const GET_OBJECTIVES = gql`\n  query GET_OBJECTIVES {\n    gameState @client {\n      boardState {\n        objectives {\n          id\n          description\n          isMandatory\n          isComplete\n        }\n      }\n    }\n  }\n`;\n\nexport const CREATE_OBJECTIVE = gql`\n  mutation CREATE_OBJECTIVE {\n    createObjective @client\n  }\n`;\n\nexport const UPDATE_OBJECTIVE = gql`\n  mutation UPDATE_OBJECTIVE($id: ID, $data: Objective) {\n    updateObjective(id: $id, data: $data) @client\n  }\n`;\n\nexport const DELETE_OBJECTIVE = gql`\n  mutation DELETE_OBJECTIVE($id: ID) {\n    deleteObjective(id: $id) @client\n  }\n`;\n","/**\n * ObjectiveSettingsPanel\n */\n\nimport * as React from 'react';\n\n// eslint-disable-next-line\nimport styles from './ObjectiveSettingsPanel.styles';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport {\n  GET_OBJECTIVES,\n  UPDATE_OBJECTIVE,\n  CREATE_OBJECTIVE,\n  DELETE_OBJECTIVE,\n} from '../../../views/ObjectivesView/ObjectivesView.requests';\nimport { oc } from 'ts-optchain';\nimport { Objective } from '../../../../../graphql/types';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\nexport interface Props {}\n\nconst ObjectiveItem = ({ objective }: { objective: Objective }) => {\n  const [inEditMode, setInEditMode] = useState(false);\n  const [objectiveData, setObjectiveData] = useState({\n    __typename: 'Objective',\n    description: objective.description,\n    isMandatory: objective.isMandatory,\n    isComplete: objective.isComplete,\n  });\n  useEffect(() => {\n    setObjectiveData(objectiveData => ({\n      ...objectiveData,\n      description: objective.description,\n      isMandatory: objective.isMandatory,\n      isComplete: objective.isComplete,\n    }));\n  }, [objective]);\n\n  const [updateObjective] = useMutation(UPDATE_OBJECTIVE, {\n    refetchQueries: () => ['GET_OBJECTIVES'],\n  });\n  const [deleteObjective] = useMutation(DELETE_OBJECTIVE, {\n    refetchQueries: () => ['GET_OBJECTIVES'],\n  });\n  const renderEditableObjective = () => {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n        }}\n      >\n        <input\n          style={{ flex: 3 }}\n          type={'text'}\n          value={objectiveData.description}\n          onChange={e => {\n            setObjectiveData({\n              ...objectiveData,\n              description: e.target.value,\n            });\n          }}\n        />\n        <div style={{ flex: 1 }}>\n          Is Mandatory?\n          <input\n            type={'checkbox'}\n            checked={!!objectiveData.isMandatory}\n            onChange={e => {\n              setObjectiveData({\n                ...objectiveData,\n                isMandatory: e.target.checked,\n              });\n            }}\n          />\n        </div>\n        <div style={{ flex: 1 }}>\n          Is Complete?\n          <input\n            type={'checkbox'}\n            checked={!!objectiveData.isComplete}\n            onChange={e => {\n              setObjectiveData({\n                ...objectiveData,\n                isComplete: e.target.checked,\n              });\n            }}\n          />\n        </div>\n        <div\n          style={{ flex: 0.5 }}\n          onClick={() => {\n            updateObjective({\n              variables: { id: objective.id, data: objectiveData },\n            });\n            setInEditMode(false);\n          }}\n        >\n          Save\n        </div>\n        <div\n          style={{ flex: 0.5 }}\n          onClick={() => {\n            deleteObjective({\n              variables: { id: objective.id },\n            });\n            setInEditMode(false);\n          }}\n        >\n          Delete\n        </div>\n      </div>\n    );\n  };\n  const renderReadOnlyObjective = () => {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n        }}\n      >\n        <div style={{ flex: 3 }}>{`${objective.description}`}</div>\n        <div style={{ flex: 1 }}>\n          {`${objective.isMandatory ? 'Mandatory' : 'Optional'}`}\n        </div>\n        <div style={{ flex: 1 }}>\n          {`${objective.isComplete ? 'Completed' : 'Not Completed'}`}\n        </div>\n        <div\n          style={{ flex: 1 }}\n          onClick={() => {\n            setInEditMode(true);\n          }}\n        >\n          Edit\n        </div>\n      </div>\n    );\n  };\n  return inEditMode ? renderEditableObjective() : renderReadOnlyObjective();\n};\n\nconst ObjectiveSettingsPanel: React.FC<Props> = (props: Props) => {\n  const { data, loading, error } = useQuery(GET_OBJECTIVES, {\n    fetchPolicy: 'no-cache',\n  });\n  const [createObjective] = useMutation(CREATE_OBJECTIVE, {\n    refetchQueries: () => ['GET_OBJECTIVES'],\n  });\n  const objectives = oc(data).gameState.boardState.objectives([]);\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error! :(</div>;\n  return (\n    <div>\n      <h1>ObjectiveSettingsPanel</h1>\n      <h2 style={{ paddingLeft: 20 }}>Objectives:</h2>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          paddingLeft: 30,\n          paddingRight: 30,\n        }}\n      >\n        {objectives.map((objective: Objective) => (\n          <ObjectiveItem objective={objective} key={objective.id} />\n        ))}\n        <div\n          onClick={() => {\n            createObjective();\n          }}\n        >\n          Create New Objective\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ObjectiveSettingsPanel;\n","import ObjectiveSettingsPanel from './ObjectiveSettingsPanel';\nexport default ObjectiveSettingsPanel;\n","import { gql } from 'apollo-boost';\n\nexport const GET_GENERAL_INFO = gql`\n  query GET_GENERAL_INFO {\n    gameState @client {\n      boardState {\n        resourceStockpiles {\n          id\n          resource {\n            name\n            stockCount\n          }\n          count\n        }\n        tags {\n          id\n          name\n          description\n        }\n      }\n    }\n  }\n`;\n\nexport const CREATE_RESOURCE_STOCKPILE = gql`\n  mutation CREATE_RESOURCE_STOCKPILE {\n    createResourceStockpile @client\n  }\n`;\n\nexport const UPDATE_RESOURCE_STOCKPILE = gql`\n  mutation UPDATE_RESOURCE_STOCKPILE(\n    $id: ID\n    $data: ResourcePile\n    $resourceData: Resource\n  ) {\n    updateResourceStockpile(id: $id, data: $data, resourceData: $resourceData)\n      @client\n  }\n`;\n\nexport const DELETE_RESOURCE_STOCKPILE = gql`\n  mutation DELETE_RESOURCE_STOCKPILE($id: ID) {\n    deleteResourceStockpile(id: $id) @client\n  }\n`;\n\nexport const CREATE_GLOBAL_TAG = gql`\n  mutation CREATE_GLOBAL_TAG {\n    createGlobalTag @client\n  }\n`;\n\nexport const UPDATE_GLOBAL_TAG = gql`\n  mutation UPDATE_GLOBAL_TAG($id: ID, $data: Tag) {\n    updateGlobalTag(id: $id, data: $data) @client\n  }\n`;\n\nexport const DELETE_GLOBAL_TAG = gql`\n  mutation DELETE_GLOBAL_TAG($id: ID) {\n    deleteGlobalTag(id: $id) @client\n  }\n`;\n","/**\n * ResourceSettingsPanel\n */\n\nimport * as React from 'react';\n\n// eslint-disable-next-line\nimport styles from './ResourceSettingsPanel.styles';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport {\n  GET_GENERAL_INFO,\n  UPDATE_RESOURCE_STOCKPILE,\n  DELETE_RESOURCE_STOCKPILE,\n  CREATE_RESOURCE_STOCKPILE,\n} from '../../../views/InfoPanelView/InfoPanelView.requests';\nimport { oc } from 'ts-optchain';\nimport { ResourcePile } from '../../../../../graphql/types';\n\nexport interface Props {}\n\nconst ResourceItem = ({\n  resourceStockpile,\n}: {\n  resourceStockpile: ResourcePile;\n}) => {\n  const [inEditMode, setInEditMode] = React.useState(false);\n  const [resourceStockpileData, setResourceStockpileData] = React.useState({\n    __typename: 'ResourcePile',\n    count: resourceStockpile.count,\n    tags: resourceStockpile.tags,\n  });\n  const [resourceData, setResourceData] = React.useState({\n    __typename: 'Resource',\n    name: oc(resourceStockpile).resource.name(''),\n    stockCount: oc(resourceStockpile).resource.stockCount(0),\n  });\n  React.useEffect(() => {\n    setResourceStockpileData(resourceStockpileData => ({\n      ...resourceStockpileData,\n      count: resourceStockpile.count,\n      tags: resourceStockpile.tags,\n    }));\n    setResourceData(resourceData => ({\n      ...resourceData,\n      name: oc(resourceStockpile).resource.name(''),\n      stockCount: oc(resourceStockpile).resource.stockCount(0),\n    }));\n  }, [resourceStockpile]);\n\n  const [updateResource] = useMutation(UPDATE_RESOURCE_STOCKPILE, {\n    refetchQueries: () => ['GET_GENERAL_INFO'],\n  });\n  const [deleteResource] = useMutation(DELETE_RESOURCE_STOCKPILE, {\n    refetchQueries: () => ['GET_GENERAL_INFO'],\n  });\n  const renderEditableResource = () => {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n        }}\n      >\n        <input\n          style={{ flex: 2 }}\n          type={'text'}\n          value={resourceData.name}\n          onChange={e => {\n            setResourceData({\n              ...resourceData,\n              name: e.target.value,\n            });\n          }}\n        />\n        <div style={{ flex: 2 }}>\n          Stock Count:\n          <input\n            type={'number'}\n            value={resourceData.stockCount}\n            onChange={e => {\n              setResourceData({\n                ...resourceData,\n                stockCount: +e.target.value,\n              });\n            }}\n          />\n        </div>\n        <div\n          style={{ flex: 0.5 }}\n          onClick={() => {\n            updateResource({\n              variables: {\n                id: resourceStockpile.id,\n                data: resourceStockpileData,\n                resourceData,\n              },\n            });\n            setInEditMode(false);\n          }}\n        >\n          Save\n        </div>\n        <div\n          style={{ flex: 0.5 }}\n          onClick={() => {\n            deleteResource({\n              variables: { id: resourceStockpile.id },\n            });\n            setInEditMode(false);\n          }}\n        >\n          Delete\n        </div>\n      </div>\n    );\n  };\n  const renderReadOnlyResource = () => {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n        }}\n      >\n        <div style={{ flex: 2 }}>\n          {`${oc(resourceStockpile).resource.name('')}`}\n        </div>\n        <div style={{ flex: 2 }}>\n          {`${oc(resourceStockpile).resource.stockCount(0)}`}\n        </div>\n        <div\n          style={{ flex: 1 }}\n          onClick={() => {\n            setInEditMode(true);\n          }}\n        >\n          Edit\n        </div>\n      </div>\n    );\n  };\n  return inEditMode ? renderEditableResource() : renderReadOnlyResource();\n};\n\nconst ResourceSettingsPanel: React.FC<Props> = (props: Props) => {\n  const { data, loading, error } = useQuery(GET_GENERAL_INFO, {\n    fetchPolicy: 'no-cache',\n  });\n  const [createResourceStockpile] = useMutation(CREATE_RESOURCE_STOCKPILE, {\n    refetchQueries: () => ['GET_GENERAL_INFO'],\n  });\n  const resourceStockpiles = oc(data).gameState.boardState.resourceStockpiles(\n    []\n  );\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error! :(</div>;\n  return (\n    <div>\n      <h1>ResourceSettingsPanel</h1>\n      <h2 style={{ paddingLeft: 20 }}>Resources:</h2>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          paddingLeft: 30,\n          paddingRight: 30,\n        }}\n      >\n        {resourceStockpiles.map((resourceStockpile: ResourcePile) => (\n          <ResourceItem\n            resourceStockpile={resourceStockpile}\n            key={resourceStockpile.id}\n          />\n        ))}\n        <div\n          onClick={() => {\n            createResourceStockpile();\n          }}\n        >\n          Create New Resource\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ResourceSettingsPanel;\n","import ResourceSettingsPanel from './ResourceSettingsPanel';\nexport default ResourceSettingsPanel;\n","/**\n * TagSettingsPanel\n */\n\nimport * as React from 'react';\n\n// eslint-disable-next-line\nimport styles from './TagSettingsPanel.styles';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport {\n  GET_GENERAL_INFO,\n  UPDATE_GLOBAL_TAG,\n  DELETE_GLOBAL_TAG,\n  CREATE_GLOBAL_TAG,\n} from '../../../views/InfoPanelView/InfoPanelView.requests';\nimport { oc } from 'ts-optchain';\nimport { Tag } from '../../../../../graphql/types';\n\nexport interface Props {}\n\nconst TagItem = ({ tag }: { tag: Tag }) => {\n  const [inEditMode, setInEditMode] = React.useState(false);\n  const [tagData, setTagData] = React.useState({\n    __typename: 'Tag',\n    name: tag.name,\n    description: tag.description,\n  });\n  React.useEffect(() => {\n    setTagData(tagData => ({\n      ...tagData,\n      name: tag.name,\n      description: tag.description,\n    }));\n  }, [tag]);\n\n  const [updateTag] = useMutation(UPDATE_GLOBAL_TAG, {\n    refetchQueries: () => ['GET_GENERAL_INFO'],\n  });\n  const [deleteTag] = useMutation(DELETE_GLOBAL_TAG, {\n    refetchQueries: () => ['GET_GENERAL_INFO'],\n  });\n  const renderEditableTag = () => {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n        }}\n      >\n        <input\n          style={{ flex: 2 }}\n          type={'text'}\n          value={tagData.name}\n          onChange={e => {\n            setTagData({\n              ...tagData,\n              name: e.target.value,\n            });\n          }}\n        />\n        <input\n          style={{ flex: 2 }}\n          type={'text'}\n          value={tagData.description}\n          onChange={e => {\n            setTagData({\n              ...tagData,\n              description: e.target.value,\n            });\n          }}\n        />\n        <div\n          style={{ flex: 0.5 }}\n          onClick={() => {\n            updateTag({\n              variables: { id: tag.id, data: tagData },\n            });\n            setInEditMode(false);\n          }}\n        >\n          Save\n        </div>\n        <div\n          style={{ flex: 0.5 }}\n          onClick={() => {\n            deleteTag({\n              variables: { id: tag.id },\n            });\n            setInEditMode(false);\n          }}\n        >\n          Delete\n        </div>\n      </div>\n    );\n  };\n  const renderReadOnlyTag = () => {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n        }}\n      >\n        <div style={{ flex: 2 }}>{`${tag.name}`}</div>\n        <div style={{ flex: 2 }}>{`${tag.description}`}</div>\n        <div\n          style={{ flex: 1 }}\n          onClick={() => {\n            setInEditMode(true);\n          }}\n        >\n          Edit\n        </div>\n      </div>\n    );\n  };\n  return inEditMode ? renderEditableTag() : renderReadOnlyTag();\n};\n\nconst TagSettingsPanel: React.FC<Props> = (props: Props) => {\n  const { data, loading, error } = useQuery(GET_GENERAL_INFO, {\n    fetchPolicy: 'no-cache',\n  });\n  const [createTag] = useMutation(CREATE_GLOBAL_TAG, {\n    refetchQueries: () => ['GET_GENERAL_INFO'],\n  });\n  const tags = oc(data).gameState.boardState.tags([]);\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error! :(</div>;\n  return (\n    <div>\n      <h1>TagSettingsPanel</h1>\n      <h2 style={{ textAlign: 'center', fontSize: 15 }}>Tags:</h2>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          paddingLeft: 30,\n          paddingRight: 30,\n        }}\n      >\n        <div>\n          {tags.map((tag: Tag) => (\n            <TagItem tag={tag} key={tag.id} />\n          ))}\n          <div\n            onClick={() => {\n              createTag();\n            }}\n          >\n            Create New Tag\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TagSettingsPanel;\n","import TagSettingsPanel from './TagSettingsPanel';\nexport default TagSettingsPanel;\n","import { gql } from 'apollo-boost';\n\nexport const GET_NOTES = gql`\n  query GET_NOTES {\n    gameState @client {\n      boardState {\n        notes {\n          id\n          description\n        }\n      }\n    }\n  }\n`;\n\nexport const CREATE_NOTE = gql`\n  mutation CREATE_NOTE {\n    createNote @client\n  }\n`;\n\nexport const UPDATE_NOTE = gql`\n  mutation UPDATE_NOTE($id: ID, $data: Note) {\n    updateNote(id: $id, data: $data) @client\n  }\n`;\n\nexport const DELETE_NOTE = gql`\n  mutation DELETE_NOTE($id: ID) {\n    deleteNote(id: $id) @client\n  }\n`;\n","/**\n * NoteSettingsPanel\n */\n\nimport * as React from 'react';\n\n// eslint-disable-next-line\nimport styles from './NoteSettingsPanel.styles';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport {\n  GET_NOTES,\n  UPDATE_NOTE,\n  DELETE_NOTE,\n  CREATE_NOTE,\n} from '../../../views/NotesView/NotesView.requests';\nimport { oc } from 'ts-optchain';\nimport { Note } from '../../../../../graphql/types';\n\nexport interface Props {}\n\nconst NoteItem = ({ note }: { note: Note }) => {\n  const [inEditMode, setInEditMode] = React.useState(false);\n  const [noteData, setNoteData] = React.useState({\n    __typename: 'Note',\n    description: note.description,\n  });\n  React.useEffect(() => {\n    setNoteData(noteData => ({\n      ...noteData,\n      description: note.description,\n    }));\n  }, [note]);\n\n  const [updateNote] = useMutation(UPDATE_NOTE, {\n    refetchQueries: () => ['GET_NOTES'],\n  });\n  const [deleteNote] = useMutation(DELETE_NOTE, {\n    refetchQueries: () => ['GET_NOTES'],\n  });\n  const renderEditableNote = () => {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n        }}\n      >\n        <input\n          style={{ flex: 4 }}\n          type={'text'}\n          value={noteData.description}\n          onChange={e => {\n            setNoteData({\n              ...noteData,\n              description: e.target.value,\n            });\n          }}\n        />\n        <div\n          style={{ flex: 0.5 }}\n          onClick={() => {\n            updateNote({\n              variables: { id: note.id, data: noteData },\n            });\n            setInEditMode(false);\n          }}\n        >\n          Save\n        </div>\n        <div\n          style={{ flex: 0.5 }}\n          onClick={() => {\n            deleteNote({\n              variables: { id: note.id },\n            });\n            setInEditMode(false);\n          }}\n        >\n          Delete\n        </div>\n      </div>\n    );\n  };\n  const renderReadOnlyNote = () => {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n        }}\n      >\n        <div style={{ flex: 4 }}>{`${note.description}`}</div>\n        <div\n          style={{ flex: 1 }}\n          onClick={() => {\n            setInEditMode(true);\n          }}\n        >\n          Edit\n        </div>\n      </div>\n    );\n  };\n  return inEditMode ? renderEditableNote() : renderReadOnlyNote();\n};\n\nconst NoteSettingsPanel: React.FC<Props> = (props: Props) => {\n  const { data, loading, error } = useQuery(GET_NOTES, {\n    fetchPolicy: 'no-cache',\n  });\n  const [createNote] = useMutation(CREATE_NOTE, {\n    refetchQueries: () => ['GET_NOTES'],\n  });\n  const notes = oc(data).gameState.boardState.notes([]);\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error! :(</div>;\n  return (\n    <div>\n      <h1>NoteSettingsPanel</h1>\n      <h2 style={{ paddingLeft: 20 }}>Notes:</h2>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          paddingLeft: 30,\n          paddingRight: 30,\n        }}\n      >\n        {notes.map((note: Note) => (\n          <NoteItem note={note} key={note.id} />\n        ))}\n        <div\n          onClick={() => {\n            createNote();\n          }}\n        >\n          Create New Note\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NoteSettingsPanel;\n","import NoteSettingsPanel from './NoteSettingsPanel';\nexport default NoteSettingsPanel;\n","import { gql } from 'apollo-boost';\n\nexport const GET_GENERAL_ACTIONS = gql`\n  query GET_GENERAL_ACTIONS {\n    gameState @client {\n      actions {\n        name\n        description\n      }\n      boardState {\n        players {\n          traits {\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const CREATE_GLOBAL_ACTION = gql`\n  mutation CREATE_GLOBAL_ACTION {\n    createGlobalAction @client\n  }\n`;\n\nexport const UPDATE_GLOBAL_ACTION = gql`\n  mutation UPDATE_GLOBAL_ACTION($id: ID, $data: Action) {\n    updateGlobalAction(id: $id, data: $data) @client\n  }\n`;\n\nexport const DELETE_GLOBAL_ACTION = gql`\n  mutation DELETE_GLOBAL_ACTION($id: ID) {\n    deleteGlobalAction(id: $id) @client\n  }\n`;\n","/**\n * ActionSettingsPanel\n */\n\nimport * as React from 'react';\n\n// eslint-disable-next-line\nimport styles from './ActionSettingsPanel.styles';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport {\n  GET_GENERAL_ACTIONS,\n  UPDATE_GLOBAL_ACTION,\n  DELETE_GLOBAL_ACTION,\n  CREATE_GLOBAL_ACTION,\n} from '../../../views/TraitsView/TraitsView.requests';\nimport { oc } from 'ts-optchain';\nimport { Trait } from '../../../../../graphql/types';\n\nexport interface Props {}\n\nconst ActionItem = ({ action }: { action: Trait }) => {\n  const [inEditMode, setInEditMode] = React.useState(false);\n  const [actionData, setActionData] = React.useState({\n    __typename: 'Action',\n    name: action.name,\n    description: action.description,\n  });\n  React.useEffect(() => {\n    setActionData(actionData => ({\n      ...actionData,\n      name: action.name,\n      description: action.description,\n    }));\n  }, [action]);\n\n  const [updateAction] = useMutation(UPDATE_GLOBAL_ACTION, {\n    refetchQueries: () => ['GET_GENERAL_ACTIONS'],\n  });\n  const [deleteAction] = useMutation(DELETE_GLOBAL_ACTION, {\n    refetchQueries: () => ['GET_GENERAL_ACTIONS'],\n  });\n  const renderEditableAction = () => {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n        }}\n      >\n        <input\n          style={{ flex: 2 }}\n          type={'text'}\n          value={actionData.name}\n          onChange={e => {\n            setActionData({\n              ...actionData,\n              name: e.target.value,\n            });\n          }}\n        />\n        <input\n          style={{ flex: 2 }}\n          type={'text'}\n          value={actionData.description}\n          onChange={e => {\n            setActionData({\n              ...actionData,\n              description: e.target.value,\n            });\n          }}\n        />\n        <div\n          style={{ flex: 0.5 }}\n          onClick={() => {\n            updateAction({\n              variables: { id: action.id, data: actionData },\n            });\n            setInEditMode(false);\n          }}\n        >\n          Save\n        </div>\n        <div\n          style={{ flex: 0.5 }}\n          onClick={() => {\n            deleteAction({\n              variables: { id: action.id },\n            });\n            setInEditMode(false);\n          }}\n        >\n          Delete\n        </div>\n      </div>\n    );\n  };\n  const renderReadOnlyAction = () => {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n        }}\n      >\n        <div style={{ flex: 2 }}>{`${action.name}`}</div>\n        <div style={{ flex: 2 }}>{`${action.description}`}</div>\n        <div\n          style={{ flex: 1 }}\n          onClick={() => {\n            setInEditMode(true);\n          }}\n        >\n          Edit\n        </div>\n      </div>\n    );\n  };\n  return inEditMode ? renderEditableAction() : renderReadOnlyAction();\n};\n\nconst ActionSettingsPanel: React.FC<Props> = (props: Props) => {\n  const { data, loading, error } = useQuery(GET_GENERAL_ACTIONS, {\n    fetchPolicy: 'no-cache',\n  });\n  const [createAction] = useMutation(CREATE_GLOBAL_ACTION, {\n    refetchQueries: () => ['GET_GENERAL_ACTIONS'],\n  });\n  const actions = oc(data).gameState.actions([]);\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error! :(</div>;\n  return (\n    <div>\n      <h1>ActionSettingsPanel</h1>\n      <h2 style={{ paddingLeft: 20 }}>Actions:</h2>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          paddingLeft: 30,\n          paddingRight: 30,\n        }}\n      >\n        {actions.map((action: Trait) => (\n          <ActionItem action={action} key={action.id} />\n        ))}\n        <div\n          onClick={() => {\n            createAction();\n          }}\n        >\n          Create New Action\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ActionSettingsPanel;\n","import ActionSettingsPanel from './ActionSettingsPanel';\nexport default ActionSettingsPanel;\n","import { gql } from 'apollo-boost';\n\nconst PlayerFragments = {\n  default: gql`\n    fragment DefaultPlayer on Player {\n      id\n      persistanceLevel\n      name\n      location {\n        id\n        persistanceLevel\n        name\n        position {\n          x\n          y\n        }\n        color\n        resourcePiles {\n          id\n          resource {\n            name\n          }\n          count\n        }\n        tags {\n          id\n          name\n          description\n        }\n      }\n      traits {\n        name\n        description\n        type\n      }\n      cards {\n        id\n        persistanceLevel\n        name\n        description\n        location {\n          id\n          persistanceLevel\n          name\n          position {\n            x\n            y\n          }\n          color\n          resourcePiles {\n            id\n            resource {\n              name\n            }\n            count\n          }\n          tags {\n            id\n            name\n            description\n          }\n        }\n        type\n        traits {\n          name\n          description\n          type\n        }\n        tags {\n          id\n          name\n          description\n        }\n      }\n      resourcePiles {\n        id\n        resource {\n          name\n        }\n        count\n      }\n      tags {\n        id\n        name\n        description\n      }\n    }\n  `,\n};\n\nexport const GET_PLAYERS_INFO = gql`\n  query GET_PLAYERS_INFO {\n    gameState @client(always: true) {\n      players {\n        ...DefaultPlayer\n      }\n      boardState {\n        players {\n          ...DefaultPlayer\n        }\n      }\n    }\n  }\n  ${PlayerFragments.default}\n`;\n","import PlayerSettingsPanel from './PlayerSettingsPanel';\nexport default PlayerSettingsPanel;\n","/**\n * PlayerSettingsPanel\n */\n\nimport * as React from 'react';\n\n// eslint-disable-next-line\nimport styles from './PlayerSettingsPanel.styles';\nimport { GET_PLAYERS_INFO } from './PlayerSettingsPanel.requests';\nimport { useQuery } from '@apollo/react-hooks';\nimport { oc } from 'ts-optchain';\nimport { Player } from '../../../../../graphql/types';\nimport { useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\nexport interface Props {}\n\nconst PlayerSettingsPanel: React.FC<Props> = (props: Props) => {\n  const [selectedPlayer, setSelectedPlayer] = useState<Player>({});\n  const { data } = useQuery(GET_PLAYERS_INFO);\n  const players: Player[] = oc(data).gameState.players([]);\n  const activePlayers: Player[] = oc(data).gameState.boardState.players([]);\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\n      <h1>PlayerSettingsPanel</h1>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          flex: 1,\n        }}\n      >\n        <div\n          style={{\n            flex: 1,\n            borderStyle: 'solid',\n            margin: 5,\n            padding: 5,\n            flexDirection: 'column',\n            display: 'flex',\n          }}\n        >\n          Players\n          {players.map(player => {\n            return (\n              <div\n                key={player.id}\n                onClick={() => {\n                  setSelectedPlayer(player);\n                }}\n              >\n                {player.name}\n              </div>\n            );\n          })}\n        </div>\n        <div\n          style={{\n            flex: 3,\n            flexDirection: 'column',\n            display: 'flex',\n          }}\n        >\n          <div\n            style={{\n              flex: 5,\n              borderStyle: 'solid',\n              margin: 5,\n              padding: 5,\n              flexDirection: 'column',\n              display: 'flex',\n            }}\n          >\n            Player Edit Form\n            {oc(selectedPlayer).id(undefined) ? (\n              <div>{oc(selectedPlayer).name('')}</div>\n            ) : (\n              <div>Select a Player</div>\n            )}\n          </div>\n          <DragDropContext onDragEnd={() => {}}>\n            <Droppable droppableId={'Active_Players'} direction={'horizontal'}>\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  style={{\n                    flex: 1,\n                    borderStyle: 'solid',\n                    margin: 5,\n                    padding: 5,\n                    flexDirection: 'row',\n                    display: 'flex',\n                  }}\n                  {...provided.droppableProps}\n                >\n                  {activePlayers.map((player, index) => {\n                    return (\n                      <Draggable\n                        draggableId={oc(player).id('1')}\n                        index={index}\n                        key={player.id}\n                      >\n                        {(provided, snapshot) => (\n                          <div\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                          >\n                            <div style={{ backgroundColor: 'yellow' }}>\n                              {player.name}\n                            </div>\n                          </div>\n                        )}\n                      </Draggable>\n                    );\n                  })}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PlayerSettingsPanel;\n","import { gql } from 'apollo-boost';\n\nconst LocationFragments = {\n  default: gql`\n    fragment DefaultLocation on Location {\n      id\n      persistanceLevel\n      name\n      position {\n        x\n        y\n      }\n      color\n      resourcePiles {\n        id\n        resource {\n          name\n        }\n        count\n      }\n      tags {\n        id\n        name\n        description\n      }\n      tags\n    }\n  `,\n};\n\nexport const GET_MAP_STATE_INFO = gql`\n  query GET_MAP_STATE_INFO {\n    gameState @client(always: true) {\n      mapState {\n        locations {\n          ...DefaultLocation\n        }\n        routes {\n          id\n          start {\n            ...DefaultLocation\n          }\n          end {\n            ...DefaultLocation\n          }\n          resourcePiles {\n            id\n            resource {\n              name\n            }\n            count\n          }\n          tags {\n            id\n            name\n            description\n          }\n          isWrapping\n        }\n      }\n    }\n  }\n  ${LocationFragments.default}\n`;\n","import LocationSettingsPanel from './LocationSettingsPanel';\nexport default LocationSettingsPanel;\n","/**\n * LocationSettingsPanel\n */\n\nimport * as React from 'react';\n\n// eslint-disable-next-line\nimport styles from './LocationSettingsPanel.styles';\nimport { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Location, Route } from '../../../../../graphql/types';\nimport { oc } from 'ts-optchain';\nimport { GET_MAP_STATE_INFO } from './LocationSettingsPanel.requests';\n\nexport interface Props {}\n\nconst LocationSettingsPanel: React.FC<Props> = (props: Props) => {\n  const [selectedLocation, setSelectedLocation] = useState<Location>({});\n  const { data } = useQuery(GET_MAP_STATE_INFO);\n  const locations: Location[] = oc(data).gameState.mapState.locations([]);\n  const routes: Route[] = oc(data).gameState.mapState.routes([]);\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden',\n      }}\n    >\n      <h1>LocationSettingsPanel</h1>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          overflow: 'hidden',\n          height: 600,\n        }}\n      >\n        <div\n          style={{\n            flex: 1,\n            borderStyle: 'solid',\n            margin: 5,\n            padding: 5,\n            flexDirection: 'column',\n            display: 'flex',\n            overflow: 'auto',\n          }}\n        >\n          Locations\n          {locations.map(location => {\n            return (\n              <div\n                key={location.id}\n                onClick={() => {\n                  setSelectedLocation(location);\n                }}\n              >\n                {location.name}\n              </div>\n            );\n          })}\n        </div>\n        <div\n          style={{\n            flex: 3,\n            borderStyle: 'solid',\n            margin: 5,\n            padding: 5,\n            flexDirection: 'column',\n            display: 'flex',\n          }}\n        >\n          Location Edit Form\n          {oc(selectedLocation).id(undefined) ? (\n            <div>\n              <div>{oc(selectedLocation).name('')}</div>\n              <div>\n                {routes\n                  .filter(route => {\n                    return (\n                      oc(route).start.id(undefined) === selectedLocation.id ||\n                      oc(route).end.id(undefined) === selectedLocation.id\n                    );\n                  })\n                  .map(route => {\n                    return (\n                      <div key={oc(route).id('')}>{`${oc(route).start.name(\n                        ''\n                      )} <-> ${oc(route).end.name('')}`}</div>\n                    );\n                  })}\n              </div>\n            </div>\n          ) : (\n            <div>Select a Location</div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LocationSettingsPanel;\n","import { gql } from 'apollo-boost';\n\nconst InfectionCardFragments = {\n  default: gql`\n    fragment DefaultInfectionCard on InfectionCard {\n      id\n      persistanceLevel\n      name\n      description\n      location {\n        id\n        persistanceLevel\n        name\n        position {\n          x\n          y\n        }\n        color\n        resourcePiles {\n          id\n          resource {\n            name\n          }\n          count\n        }\n        tags {\n          id\n          name\n          description\n        }\n      }\n      type\n      traits {\n        name\n        description\n        type\n      }\n      tags {\n        id\n        name\n        description\n      }\n    }\n  `,\n};\n\nexport const GET_INFECTION_CARDS_INFO = gql`\n  query GET_INFECTION_CARDS_INFO {\n    gameState @client(always: true) {\n      infectionCards {\n        ...DefaultInfectionCard\n      }\n    }\n  }\n  ${InfectionCardFragments.default}\n`;\n","import InfectionCardSettingsPanel from './InfectionCardSettingsPanel';\nexport default InfectionCardSettingsPanel;\n","/**\n * InfectionCardSettingsPanel\n */\n\nimport * as React from 'react';\n\n// eslint-disable-next-line\nimport styles from './InfectionCardSettingsPanel.styles';\nimport { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { InfectionCard } from '../../../../../graphql/types';\nimport { oc } from 'ts-optchain';\nimport { GET_INFECTION_CARDS_INFO } from './InfectionCardSettingsPanel.requests';\n\nexport interface Props {}\n\nconst InfectionCardSettingsPanel: React.FC<Props> = (props: Props) => {\n  const [selectedInfectionCard, setSelectedInfectionCard] = useState<\n    InfectionCard\n  >({});\n  const { data } = useQuery(GET_INFECTION_CARDS_INFO);\n  const infectionCards: InfectionCard[] = oc(data).gameState.infectionCards([]);\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden',\n      }}\n    >\n      <h1>InfectionCardSettingsPanel</h1>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          overflow: 'hidden',\n          height: 600,\n        }}\n      >\n        <div\n          style={{\n            flex: 1,\n            borderStyle: 'solid',\n            margin: 5,\n            padding: 5,\n            flexDirection: 'column',\n            display: 'flex',\n            overflow: 'auto',\n          }}\n        >\n          InfectionCards\n          {infectionCards.map(infectionCard => {\n            return (\n              <div\n                key={infectionCard.id}\n                onClick={() => {\n                  setSelectedInfectionCard(infectionCard);\n                }}\n              >\n                {infectionCard.name}\n              </div>\n            );\n          })}\n        </div>\n        <div\n          style={{\n            flex: 3,\n            borderStyle: 'solid',\n            margin: 5,\n            padding: 5,\n            flexDirection: 'column',\n            display: 'flex',\n          }}\n        >\n          InfectionCard Edit Form\n          {oc(selectedInfectionCard).id(undefined) ? (\n            <div>{oc(selectedInfectionCard).name('')}</div>\n          ) : (\n            <div>Select an Infection Card</div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InfectionCardSettingsPanel;\n","import { gql } from 'apollo-boost';\n\nconst PlayerCardFragments = {\n  default: gql`\n    fragment DefaultPlayerCard on PlayerCard {\n      id\n      persistanceLevel\n      name\n      description\n      location {\n        id\n        persistanceLevel\n        name\n        position {\n          x\n          y\n        }\n        color\n        resourcePiles {\n          id\n          resource {\n            name\n          }\n          count\n        }\n        tags {\n          id\n          name\n          description\n        }\n      }\n      type\n      traits {\n        name\n        description\n        type\n      }\n      tags {\n        id\n        name\n        description\n      }\n    }\n  `,\n};\n\nexport const GET_PLAYER_CARDS_INFO = gql`\n  query GET_PLAYER_CARDS_INFO {\n    gameState @client(always: true) {\n      playerCards {\n        ...DefaultPlayerCard\n      }\n    }\n  }\n  ${PlayerCardFragments.default}\n`;\n","import PlayerCardSettingsPanel from './PlayerCardSettingsPanel';\nexport default PlayerCardSettingsPanel;\n","/**\n * PlayerCardSettingsPanel\n */\n\nimport * as React from 'react';\n\n// eslint-disable-next-line\nimport styles from './PlayerCardSettingsPanel.styles';\nimport { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { PlayerCard } from '../../../../../graphql/types';\nimport { oc } from 'ts-optchain';\nimport { GET_PLAYER_CARDS_INFO } from './PlayerCardSettingsPanel.requests';\n\nexport interface Props {}\n\nconst PlayerCardSettingsPanel: React.FC<Props> = (props: Props) => {\n  const [selectedPlayerCard, setSelectedPlayerCard] = useState<PlayerCard>({});\n  const { data } = useQuery(GET_PLAYER_CARDS_INFO, {\n    fetchPolicy: 'no-cache',\n  });\n  const playerCards: PlayerCard[] = oc(data).gameState.playerCards([]);\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden',\n      }}\n    >\n      <h1>PlayerCardSettingsPanel</h1>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          overflow: 'hidden',\n          height: 600,\n        }}\n      >\n        <div\n          style={{\n            flex: 1,\n            borderStyle: 'solid',\n            margin: 5,\n            padding: 5,\n            flexDirection: 'column',\n            display: 'flex',\n            overflow: 'auto',\n          }}\n        >\n          PlayerCards\n          {playerCards.map(playerCard => {\n            return (\n              <div\n                key={playerCard.id}\n                onClick={() => {\n                  setSelectedPlayerCard(playerCard);\n                }}\n              >\n                {playerCard.name}\n              </div>\n            );\n          })}\n        </div>\n        <div\n          style={{\n            flex: 3,\n            borderStyle: 'solid',\n            margin: 5,\n            padding: 5,\n            flexDirection: 'column',\n            display: 'flex',\n          }}\n        >\n          PlayerCard Edit Form\n          {oc(selectedPlayerCard).id(undefined) ? (\n            <div>{oc(selectedPlayerCard).name('')}</div>\n          ) : (\n            <div>Select an Player Card</div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PlayerCardSettingsPanel;\n","/**\n * SettingsModal\n */\n\nimport * as React from 'react';\n\n// eslint-disable-next-line\nimport styles from './SettingsModal.styles';\nimport Modal from 'react-modal';\nimport { Tabs, TabList, Tab, TabPanel } from 'react-tabs';\nimport AlertSettingsPanel from './AlertSettingsPanel';\nimport ObjectiveSettingsPanel from './ObjectiveSettingsPanel';\nimport ResourceSettingsPanel from './ResourceSettingsPanel';\nimport TagSettingsPanel from './TagSettingsPanel';\nimport NoteSettingsPanel from './NoteSettingsPanel';\nimport ActionSettingsPanel from './ActionSettingsPanel';\nimport PlayerSettingsPanel from './PlayerSettingsPanel';\nimport LocationSettingsPanel from './LocationSettingsPanel';\nimport InfectionCardSettingsPanel from './InfectionCardSettingsPanel';\nimport PlayerCardSettingsPanel from './PlayerCardSettingsPanel';\nimport './SettingsModal.css';\n\nexport interface Props {\n  closeModal: () => void;\n  isOpen: boolean;\n}\n\nModal.setAppElement('#root');\nconst SettingsModal: React.FC<Props> = (props: Props) => {\n  return (\n    <Modal\n      isOpen={props.isOpen}\n      onRequestClose={props.closeModal}\n      contentLabel='Settings'\n    >\n      <div\n        style={{\n          height: '100%',\n          overflow: 'hidden',\n          display: 'flex',\n          flexDirection: 'column',\n        }}\n      >\n        <h1>SettingsModal</h1>\n        <button onClick={props.closeModal}>close modal</button>\n        <Tabs>\n          <div\n            style={{\n              flex: 1,\n              display: 'flex',\n              flexDirection: 'row',\n              minHeight: '700',\n              overflow: 'hidden',\n            }}\n          >\n            <div\n              style={{\n                borderStyle: 'solid',\n                margin: 5,\n                padding: 5,\n                flexDirection: 'column',\n                display: 'flex',\n                overflow: 'hidden',\n              }}\n            >\n              Tabs\n              <TabList>\n                <Tab>Alerts</Tab>\n                <Tab>Objectives</Tab>\n                <Tab>Resources</Tab>\n                <Tab>Tags</Tab>\n                <Tab>Notes</Tab>\n                <Tab>Actions</Tab>\n                <Tab>Players</Tab>\n                <Tab>Locations</Tab>\n                <Tab>Infection Cards</Tab>\n                <Tab>Player Cards</Tab>\n              </TabList>\n            </div>\n            <div\n              style={{\n                flex: 3,\n                borderStyle: 'solid',\n                margin: 5,\n                padding: 5,\n                flexDirection: 'column',\n                display: 'flex',\n                overflow: 'hidden',\n              }}\n            >\n              Settings\n              <TabPanel>\n                <AlertSettingsPanel />\n              </TabPanel>\n              <TabPanel>\n                <ObjectiveSettingsPanel />\n              </TabPanel>\n              <TabPanel>\n                <ResourceSettingsPanel />\n              </TabPanel>\n              <TabPanel>\n                <TagSettingsPanel />\n              </TabPanel>\n              <TabPanel>\n                <NoteSettingsPanel />\n              </TabPanel>\n              <TabPanel>\n                <ActionSettingsPanel />\n              </TabPanel>\n              <TabPanel>\n                <PlayerSettingsPanel />\n              </TabPanel>\n              <TabPanel>\n                <LocationSettingsPanel />\n              </TabPanel>\n              <TabPanel>\n                <InfectionCardSettingsPanel />\n              </TabPanel>\n              <TabPanel>\n                <PlayerCardSettingsPanel />\n              </TabPanel>\n            </div>\n          </div>\n        </Tabs>\n      </div>\n    </Modal>\n  );\n};\n\nexport default SettingsModal;\n","import SettingsModal from './SettingsModal';\nexport default SettingsModal;\n","import TraitsView from './TraitsView';\nexport default TraitsView;\n","/**\n * TraitsView\n */\n\nimport * as React from 'react';\n\n// eslint-disable-next-line\nimport styles from './TraitsView.styles';\nimport { Trait, Player } from '../../../../graphql/types';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_GENERAL_ACTIONS } from './TraitsView.requests';\nimport { oc } from 'ts-optchain';\n\nexport interface Props {}\n\nconst TraitsView: React.FC = (props: Props) => {\n  const { data, loading, error } = useQuery(GET_GENERAL_ACTIONS);\n  const actions = oc(data).gameState.actions([]);\n  const playerTraits = oc(data)\n    .gameState.boardState.players([])\n    .map((player: Player) => player.traits)\n    .reduce((acc: Trait[], cur: Trait[]) => [...acc, ...cur], []);\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error! :(</div>;\n  return (\n    <div\n      style={{\n        flex: 1,\n        padding: 10,\n        display: 'flex',\n      }}\n    >\n      <div\n        style={{\n          flex: 1,\n          borderColor: 'white',\n          borderWidth: 10,\n          borderStyle: 'solid',\n          borderRadius: 10,\n          overflow: 'auto',\n        }}\n      >\n        <h1 style={{ paddingLeft: 20 }}>Actions:</h1>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'left',\n            paddingLeft: 30,\n            paddingRight: 30,\n          }}\n        >\n          <div>\n            {actions.map((action: Trait, index: number) => (\n              <div key={index}>{action.description}</div>\n            ))}\n          </div>\n        </div>\n        <h1 style={{ paddingLeft: 20 }}>Traits:</h1>\n        {/* <h3 style={{ paddingLeft: 25 }}>Player Traits:</h3> */}\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'left',\n            paddingLeft: 30,\n            paddingRight: 30,\n          }}\n        >\n          <div>\n            {playerTraits.map((playerTrait: Trait, index: number) => (\n              <div key={index}>{playerTrait.description}</div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TraitsView;\n","import { gql } from 'apollo-boost';\n\nexport const GET_MAP_STATE = gql`\n  query GET_MAP_STATE {\n    gameState @client {\n      mapState {\n        locations {\n          id\n          name\n          position {\n            x\n            y\n          }\n          color\n        }\n        routes {\n          id\n          start {\n            id\n            name\n          }\n          end {\n            id\n            name\n          }\n          isWrapping\n        }\n      }\n    }\n  }\n`;\n\nexport const UPDATE_LOCATION_POSITION = gql`\n  mutation UPDATE_LOCATION_POSITION($id: ID, $x: Float, $y: Float) {\n    updateLocationPosition(id: $id, x: $x, y: $y) @client\n  }\n`;\n","import MapView from './MapView';\nexport default MapView;\n","/**\n * MapView\n */\n\nimport * as React from 'react';\nimport { oc } from 'ts-optchain';\nimport { Graph } from 'react-d3-graph';\n\n// eslint-disable-next-line\nimport styles from './MapView.styles';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { GET_MAP_STATE, UPDATE_LOCATION_POSITION } from './MapView.requests';\nimport { MapState, LocationColor } from '../../../../graphql/types';\nimport { getHexColorFromLocationColor } from '../../../../utils/view-logic';\nimport './MapView.css';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\n\nexport interface Props {\n  setSelectedItem: (item: any) => void;\n}\n\nconst renderGraph = (\n  mapState: MapState,\n  graphData: any,\n  setSelectedItem: (item: any) => void,\n  updateLocationPosition: (id: string, x: number, y: number) => void\n) => {\n  const locations = oc(mapState).locations([]);\n  const routes = oc(mapState).routes([]);\n  // the graph configuration, you only need to pass down properties\n  // that you want to override, otherwise default ones will be used\n  const myConfig = {\n    nodeHighlightBehavior: true,\n    highlightOpacity: 0.3,\n    node: {\n      labelProperty: 'name',\n      fontColor: 'white',\n      color: 'white',\n      size: 120,\n      highlightStrokeColor: 'blue',\n    },\n    link: {\n      highlightColor: 'lightblue',\n    },\n    height: '100%', // dimensions.height,\n    width: '100%', //dimensions.width,\n    // staticGraph: true,\n    staticGraphWithDragAndDrop: true,\n    maxZoom: 3,\n    minZoom: 0.6,\n  };\n\n  const onClickNode = (nodeId: string) => {\n    const selectedLocation = locations.filter(\n      location => location.id === nodeId\n    )[0];\n    setSelectedItem(selectedLocation);\n  };\n\n  const onClickLink = (source: string, target: string) => {\n    const selectedRoute = routes.filter(\n      route =>\n        oc(route).start.id('') === source && oc(route).end.id('') === target\n    )[0];\n    setSelectedItem(selectedRoute);\n  };\n\n  // const onNodePositionChange = (nodeId: string, x: number, y: number) => {\n  //   console.log\n  //   updateLocationPosition(nodeId, (x - 440) / 9, (y - 210) / -9);\n  // };\n\n  return (\n    <Graph\n      id='graph-id' // id is mandatory, if no id is defined rd3g will throw an error\n      data={graphData}\n      config={myConfig}\n      onClickNode={onClickNode}\n      onClickLink={onClickLink}\n      // onNodePositionChange={onNodePositionChange}\n    />\n  );\n};\n\nconst MapView: React.FC<Props> = (props: Props) => {\n  const { data, loading, error } = useQuery(GET_MAP_STATE);\n  const [updateLocationPosition] = useMutation(UPDATE_LOCATION_POSITION, {\n    refetchQueries: () => ['GET_MAP_STATE'],\n  });\n  const [graphData, setGraphData] = useState<any>({\n    nodes: [{ id: '' }],\n    links: [],\n  });\n  useEffect(() => {\n    const mapState: MapState = oc(data).gameState.mapState({});\n    const locations = oc(mapState).locations([{ id: '' }]);\n    const routes = oc(mapState).routes([]);\n    setGraphData({\n      nodes: locations.map(location => ({\n        id: location.id,\n        name: location.name,\n        color: getHexColorFromLocationColor(\n          oc(location).color(LocationColor.MISC)\n        ),\n        x: oc(location).position.x(0) * 9 + 440,\n        y: oc(location).position.y(0) * -9 + 210,\n      })),\n      links: routes.map(route => ({\n        source: oc(route).start.id(''),\n        target: oc(route).end.id(''),\n        strokeWidth: oc(route).isWrapping(false) ? 0.25 : 1,\n      })),\n    });\n  }, [data]);\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error! :(</div>;\n  return (\n    <div\n      style={{\n        flex: 2.5,\n        padding: 0,\n        display: 'flex',\n        // overflow: 'hidden',\n      }}\n    >\n      <div\n        style={{\n          flex: 1,\n          borderColor: 'white',\n          borderWidth: 10,\n          borderStyle: 'solid',\n          borderRadius: 10,\n          position: 'relative',\n          overflow: 'auto',\n        }}\n      >\n        <div style={{ left: 10, textAlign: 'center', position: 'absolute' }}>\n          <h1>Map:</h1>\n        </div>\n        {renderGraph(\n          data.gameState.mapState,\n          graphData,\n          props.setSelectedItem,\n          (id, x, y) => {\n            updateLocationPosition({\n              variables: {\n                id,\n                x,\n                y,\n              },\n            });\n          }\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MapView;\n","import LocationDetailView from './LocationDetailView';\nexport default LocationDetailView;\n","/**\n * LocationDetailView\n */\n\nimport * as React from 'react';\n\n// eslint-disable-next-line\nimport styles from './LocationDetailView.styles';\n\nexport interface Props {}\n\nconst LocationDetailView: React.FC<Props> = (props: Props) => {\n  return (\n    <div>\n      <h1>LocationDetailView</h1>\n    </div>\n  );\n};\n\nexport default LocationDetailView;\n","import RouteDetailView from './RouteDetailView';\nexport default RouteDetailView;\n","/**\n * RouteDetailView\n */\n\nimport * as React from 'react';\n\n// eslint-disable-next-line\nimport styles from './RouteDetailView.styles';\n\nexport interface Props {}\n\nconst RouteDetailView: React.FC<Props> = (props: Props) => {\n  return (\n    <div>\n      <h1>RouteDetailView</h1>\n    </div>\n  );\n};\n\nexport default RouteDetailView;\n","import PlayerDetailView from './PlayerDetailView';\nexport default PlayerDetailView;\n","/**\n * PlayerDetailView\n */\n\nimport * as React from 'react';\n\n// eslint-disable-next-line\nimport styles from './PlayerDetailView.styles';\n\nexport interface Props {}\n\nconst PlayerDetailView: React.FC<Props> = (props: Props) => {\n  return (\n    <div>\n      <h1>PlayerDetailView</h1>\n    </div>\n  );\n};\n\nexport default PlayerDetailView;\n","import DetailView from './DetailView';\nexport default DetailView;\n","/**\n * DetailView\n */\n\nimport * as React from 'react';\n\n// eslint-disable-next-line\nimport styles from './DetailView.styles';\nimport { oc } from 'ts-optchain';\nimport LocationDetailView from './LocationDetailView';\nimport RouteDetailView from './RouteDetailView';\nimport PlayerDetailView from './PlayerDetailView';\n\nexport interface Props {\n  selectedItem: any;\n}\n\nconst DetailView: React.FC<Props> = (props: Props) => {\n  const getSelectedDetailView = () => {\n    const selectedItem = oc(props).selectedItem({});\n    switch (selectedItem.__typename) {\n      case 'Location':\n        return (\n          <div>\n            {`Location - \n            ${oc(selectedItem)({}).name}`}\n            <LocationDetailView />\n          </div>\n        );\n      case 'Route':\n        return (\n          <div>\n            {`Route - \n            ${oc(selectedItem).start({}).name} <-> ${\n              oc(selectedItem).end({}).name\n            }`}\n            <RouteDetailView />\n          </div>\n        );\n      case 'Player':\n        return (\n          <div>\n            {`Player - \n          ${oc(selectedItem)({}).name}`}\n            <PlayerDetailView />\n          </div>\n        );\n      default:\n        return <div>Select an Item to see it's stats</div>;\n    }\n  };\n  return (\n    <div\n      style={{\n        flex: 1,\n        padding: 10,\n        display: 'flex',\n      }}\n    >\n      <div\n        style={{\n          flex: 1,\n          borderColor: 'white',\n          borderWidth: 10,\n          borderStyle: 'solid',\n          borderRadius: 10,\n          overflow: 'auto',\n        }}\n      >\n        <h1 style={{ paddingLeft: 20 }}>Detail:</h1>\n        {getSelectedDetailView()}\n      </div>\n    </div>\n  );\n};\n\nexport default DetailView;\n","import InfectionDeckView from './InfectionDeckView';\nexport default InfectionDeckView;\n","/**\n * InfectionDeckView\n */\n\nimport * as React from 'react';\n\n// eslint-disable-next-line\nimport styles from './InfectionDeckView.styles';\nimport { Tag } from '../../../../graphql/types';\nimport { GET_INFECTION_DECK } from './InfectionDeckView.requests';\nimport { useQuery } from '@apollo/react-hooks';\nimport { oc } from 'ts-optchain';\n\nexport interface Props {\n  openModal: () => void;\n}\n\nconst InfectionDeckView: React.FC<Props> = (props: Props) => {\n  const { data, loading, error } = useQuery(GET_INFECTION_DECK);\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error! :(</div>;\n  const drawPileStacks = oc(\n    data\n  ).gameState.boardState.infectionDeck.drawPileStacks([]);\n\n  const infectionDeckStats: Tag[] = [\n    {\n      description: `${(1 / drawPileStacks[0].shuffledCards.length) *\n        100} % chance of drawing any of the ${\n        drawPileStacks[0].shuffledCards.length\n      } cards at the top of the deck.`,\n    },\n    {\n      description: `${(1 /\n        drawPileStacks[drawPileStacks.length - 1].shuffledCards.length) *\n        100} % chance of drawing any of the ${\n        drawPileStacks[drawPileStacks.length - 1].shuffledCards.length\n      } cards at the bottom of the deck.`,\n    },\n  ];\n\n  return (\n    <div\n      style={{\n        flex: 1,\n        padding: 10,\n        display: 'flex',\n      }}\n    >\n      <div\n        style={{\n          flex: 1,\n          borderColor: 'white',\n          borderWidth: 10,\n          borderStyle: 'solid',\n          borderRadius: 10,\n          overflow: 'auto',\n        }}\n      >\n        <h1 style={{ paddingLeft: 20, fontSize: 15 }}>Infection Deck:</h1>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n          }}\n        >\n          <button onClick={props.openModal}>open modal</button>\n          <div>\n            {infectionDeckStats.map((infectionDeckStat, index) => (\n              <div key={index}>{infectionDeckStat.description}</div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InfectionDeckView;\n","import { gql } from 'apollo-boost';\n\nexport const GET_PLAYERS = gql`\n  query GET_PLAYERS {\n    gameState @client {\n      boardState {\n        players {\n          id\n          name\n          cards {\n            id\n            name\n            type\n            location {\n              color\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","/**\n * CommandCenterScreen\n */\n\nimport * as React from 'react';\nimport { useState } from 'react';\n\n// eslint-disable-next-line\nimport styles from './CommandCenterScreen.styles';\nimport InfectionDeckModal from './modals/InfectionDeckModal';\nimport PlayerDeckModal from './modals/PlayerDeckModal';\nimport SettingsModal from './modals/SettingsModal';\nimport TraitsView from './views/TraitsView';\nimport MapView from './views/MapView';\nimport DetailView from './views/DetailView';\nimport InfectionDeckView from './views/InfectionDeckView';\nimport PlayersView from './views/PlayersView';\nimport PlayerDeckView from './views/PlayerDeckView';\nimport ObjectivesView from './views/ObjectivesView';\nimport InfoPanelView from './views/InfoPanelView';\nimport NotesView from './views/NotesView';\nimport { saveGameState, loadGameState } from '../../utils/store';\nimport client from '../../graphql/client';\n\nexport interface Props {}\n\nexport enum ModalName {\n  PLAYER_DECK_MODAL,\n  INFECTION_DECK_MODAL,\n  SETTINGS_MODAL,\n  NONE,\n}\n\nconst CommandCenterScreen: React.FC<Props> = (props: Props) => {\n  const [modalStates, setModalStates] = useState({\n    playerDeck: false,\n    // playerDeck: true,\n    infectionDeck: false,\n    // infectionDeck: true,\n    settings: false,\n    // settings: true,\n  });\n\n  const [selectedItem, setSelectedItem] = useState({});\n\n  const setActiveModal = (activeModal: ModalName) => {\n    switch (activeModal) {\n      case ModalName.PLAYER_DECK_MODAL:\n        return setModalStates({\n          playerDeck: true,\n          infectionDeck: false,\n          settings: false,\n        });\n      case ModalName.INFECTION_DECK_MODAL:\n        return setModalStates({\n          playerDeck: false,\n          infectionDeck: true,\n          settings: false,\n        });\n      case ModalName.SETTINGS_MODAL:\n        return setModalStates({\n          playerDeck: false,\n          infectionDeck: false,\n          settings: true,\n        });\n    }\n  };\n\n  const dismissActiveModal = () => {\n    return setModalStates({\n      playerDeck: false,\n      infectionDeck: false,\n      settings: false,\n    });\n  };\n\n  const openSettingsModal = () => setActiveModal(ModalName.SETTINGS_MODAL);\n  const openInfectionDeckModal = () =>\n    setActiveModal(ModalName.INFECTION_DECK_MODAL);\n  const openPlayerDeckModal = () => setActiveModal(ModalName.PLAYER_DECK_MODAL);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        height: '100vh',\n        fontSize: '15px',\n        color: 'white',\n        flexDirection: 'column',\n      }}\n    >\n      <div\n        style={{\n          textAlign: 'center',\n          display: 'flex',\n          flexDirection: 'row',\n          overflow: 'hidden',\n        }}\n      >\n        <h2>Pandemic Companion</h2>\n        <button onClick={openSettingsModal}>open modal</button>\n        <button onClick={saveGameState}>saveGameState</button>\n        <button\n          onClick={() => {\n            loadGameState();\n            client.resetStore();\n          }}\n        >\n          loadGameState\n        </button>\n      </div>\n      <div style={{ flex: 1, display: 'flex', overflow: 'hidden' }}>\n        <ObjectivesView />\n        <InfoPanelView />\n        <NotesView />\n      </div>\n      <div style={{ flex: 2, display: 'flex', overflow: 'hidden' }}>\n        <TraitsView />\n        <MapView setSelectedItem={setSelectedItem} />\n        <DetailView selectedItem={selectedItem} />\n      </div>\n      <div style={{ flex: 1, display: 'flex', overflow: 'hidden' }}>\n        <InfectionDeckView openModal={openInfectionDeckModal} />\n        <PlayersView setSelectedItem={setSelectedItem} />\n        <PlayerDeckView openModal={openPlayerDeckModal} />\n      </div>\n\n      <InfectionDeckModal\n        isOpen={modalStates.infectionDeck}\n        closeModal={dismissActiveModal}\n      />\n\n      <PlayerDeckModal\n        isOpen={modalStates.playerDeck}\n        closeModal={dismissActiveModal}\n      />\n      <SettingsModal\n        isOpen={modalStates.settings}\n        closeModal={dismissActiveModal}\n      />\n    </div>\n  );\n};\n\nexport default CommandCenterScreen;\n","import PlayersView from './PlayersView';\nexport default PlayersView;\n","/**\n * PlayersView\n */\n\nimport * as React from 'react';\n\n// eslint-disable-next-line\nimport styles from './PlayersView.styles';\nimport { Player } from '../../../../graphql/types';\nimport { oc } from 'ts-optchain';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_PLAYERS } from './PlayersView.requests';\n\nexport interface Props {\n  setSelectedItem: (item: any) => void;\n}\n\nconst PlayersView: React.FC<Props> = (props: Props) => {\n  const { data, loading, error } = useQuery(GET_PLAYERS);\n  const players = oc(data).gameState.boardState.players([]);\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error! :(</div>;\n  return (\n    <div\n      style={{\n        flex: 2,\n        padding: 10,\n        display: 'flex',\n      }}\n    >\n      <div\n        style={{\n          flex: 1,\n          borderColor: 'white',\n          borderWidth: 10,\n          borderStyle: 'solid',\n          borderRadius: 10,\n          overflow: 'auto',\n        }}\n      >\n        <h1 style={{ paddingLeft: 20, fontSize: 15 }}>Players:</h1>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n          }}\n        >\n          {players.map((player: Player) => (\n            <div\n              key={player.id}\n              onClick={() => {\n                props.setSelectedItem(player);\n              }}\n            >\n              <h3>{player.name}</h3>\n              <div>{`Hand Size: ${oc(player).cards.length(2)}`}</div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PlayersView;\n","import PlayerDeckView from './PlayerDeckView';\nexport default PlayerDeckView;\n","/**\n * PlayerDeckView\n */\n\nimport * as React from 'react';\n\n// eslint-disable-next-line\nimport styles from './PlayerDeckView.styles';\nimport { Tag, PlayerCardType, PlayerCard } from '../../../../graphql/types';\nimport { GET_PLAYER_DECK } from './PlayerDeckView.requests';\nimport { useQuery } from '@apollo/react-hooks';\nimport { oc } from 'ts-optchain';\n\nexport interface Props {\n  openModal: () => void;\n}\n\nconst PlayerDeckView: React.FC<Props> = (props: Props) => {\n  const { data, loading, error } = useQuery(GET_PLAYER_DECK);\n  const drawPile = oc(data).gameState.boardState.playerDeck.drawPile([]);\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error! :(</div>;\n\n  let numEventCardsInDrawPile = 0;\n  drawPile.forEach((card: PlayerCard) => {\n    if (oc(card).type(PlayerCardType.MISC) === PlayerCardType.EVENT)\n      numEventCardsInDrawPile++;\n  });\n  const playerDeckStats: Tag[] = [\n    {\n      description: `${drawPile.length} cards left in deck.`,\n    },\n    {\n      description: `${numEventCardsInDrawPile} more event cards left in the draw pile.`,\n    },\n  ];\n  return (\n    <div\n      style={{\n        flex: 1,\n        padding: 10,\n        display: 'flex',\n      }}\n    >\n      <div\n        style={{\n          flex: 1,\n          borderColor: 'white',\n          borderWidth: 10,\n          borderStyle: 'solid',\n          borderRadius: 10,\n          overflow: 'auto',\n        }}\n      >\n        <h1 style={{ paddingLeft: 20, fontSize: 15 }}>Player Deck:</h1>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n          }}\n        >\n          <button onClick={props.openModal}>open modal</button>\n          <div>\n            {playerDeckStats.map((playerDeckStat, index) => (\n              <div key={index}>{playerDeckStat.description}</div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PlayerDeckView;\n","import ObjectivesView from './ObjectivesView';\nexport default ObjectivesView;\n","/**\n * ObjectivesView\n */\n\nimport * as React from 'react';\n\n// eslint-disable-next-line\nimport styles from './ObjectivesView.styles';\nimport { Objective } from '../../../../graphql/types';\nimport { GET_OBJECTIVES } from './ObjectivesView.requests';\nimport { useQuery } from '@apollo/react-hooks';\nimport { oc } from 'ts-optchain';\n\nexport interface Props {}\n\nconst ObjectivesView: React.FC = (props: Props) => {\n  const { data, loading, error } = useQuery(GET_OBJECTIVES);\n  const objectives = oc(data).gameState.boardState.objectives([]);\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error! :(</div>;\n  return (\n    <div\n      style={{\n        flex: 1,\n        padding: 10,\n        display: 'flex',\n      }}\n    >\n      <div\n        style={{\n          flex: 1,\n          borderColor: 'white',\n          borderWidth: 10,\n          borderStyle: 'solid',\n          borderRadius: 10,\n          overflow: 'auto',\n        }}\n      >\n        <h1 style={{ paddingLeft: 20 }}>Objectives:</h1>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'left',\n            paddingLeft: 30,\n            paddingRight: 30,\n          }}\n        >\n          <div>\n            {objectives.map((objective: Objective) => (\n              <div key={objective.id}>{`${\n                objective.isMandatory ? 'Mandatory' : 'Optional'\n              }: ${objective.description}`}</div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ObjectivesView;\n","import InfoPanelView from './InfoPanelView';\nexport default InfoPanelView;\n","/**\n * InfoPanelView\n */\n\nimport * as React from 'react';\n\n// eslint-disable-next-line\nimport styles from './InfoPanelView.styles';\nimport { Tag, ResourcePile } from '../../../../graphql/types';\nimport { GET_GENERAL_INFO } from './InfoPanelView.requests';\nimport { useQuery } from '@apollo/react-hooks';\nimport { oc } from 'ts-optchain';\n\nexport interface Props {}\n\nconst InfoPanelView: React.FC = (props: Props) => {\n  const { data, loading, error } = useQuery(GET_GENERAL_INFO);\n  const resourceStockpiles = oc(data).gameState.boardState.resourceStockpiles(\n    []\n  );\n  const tags = oc(data).gameState.boardState.tags([]);\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error! :(</div>;\n  const alerts: Tag[] = [{ id: 'test', description: 'New Mexico at risk!' }];\n  return (\n    <div\n      style={{\n        flex: 2,\n        padding: 10,\n        display: 'flex',\n      }}\n    >\n      <div\n        style={{\n          flex: 1,\n          borderColor: 'white',\n          borderWidth: 10,\n          borderStyle: 'solid',\n          borderRadius: 10,\n          overflow: 'auto',\n        }}\n      >\n        <h1 style={{ textAlign: 'center', fontSize: 15 }}>\n          Resources: - Alerts: - Tags:\n        </h1>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n          }}\n        >\n          <div>\n            {resourceStockpiles.map((resourceStockpile: ResourcePile) => (\n              <div key={resourceStockpile.id}>{`${oc(\n                resourceStockpile\n              ).resource.name('')}: ${oc(resourceStockpile).resource.stockCount(\n                0\n              )} left in stock.`}</div>\n            ))}\n          </div>\n          <div>\n            {alerts.map(alert => (\n              <div key={alert.id}>{alert.description}</div>\n            ))}\n          </div>\n          <div>\n            {tags.map((tag: Tag) => (\n              <div key={tag.id}>{`${tag.name}: ${tag.description}`}</div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InfoPanelView;\n","import NotesView from './NotesView';\nexport default NotesView;\n","/**\n * NotesView\n */\n\nimport * as React from 'react';\n\n// eslint-disable-next-line\nimport styles from './NotesView.styles';\nimport { Note } from '../../../../graphql/types';\nimport { GET_NOTES } from './NotesView.requests';\nimport { useQuery } from '@apollo/react-hooks';\nimport { oc } from 'ts-optchain';\n\nexport interface Props {}\n\nconst NotesView: React.FC = (props: Props) => {\n  const { data, loading, error } = useQuery(GET_NOTES);\n  const notes = oc(data).gameState.boardState.notes([]);\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error! :(</div>;\n  return (\n    <div\n      style={{\n        flex: 1,\n        padding: 10,\n        display: 'flex',\n      }}\n    >\n      <div\n        style={{\n          flex: 1,\n          borderColor: 'white',\n          borderWidth: 10,\n          borderStyle: 'solid',\n          borderRadius: 10,\n          overflow: 'auto',\n        }}\n      >\n        <h1 style={{ paddingLeft: 20 }}>Notes:</h1>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'left',\n            paddingLeft: 30,\n            paddingRight: 30,\n          }}\n        >\n          <div>\n            {notes.map((note: Note) => (\n              <div key={note.id}>{note.description}</div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NotesView;\n","import CommandCenterScreen from './CommandCenterScreen';\nexport default CommandCenterScreen;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport CommandCenterScreen from '../components/CommandCenterScreen';\n\nconst AppRouter: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route>\n          <CommandCenterScreen />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default AppRouter;\n","import React from 'react';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport client from '../graphql/client';\nimport AppRouter from './router';\nimport './App.css';\n// import { loadPandemicBaseGameState } from '../graphql/presets';\n\n// loadPandemicBaseGameState();\n\nconst App: React.FC = () => {\n  return (\n    <ApolloProvider client={client}>\n      <div style={{ backgroundColor: '#282c34' }}>\n        <AppRouter />\n      </div>\n    </ApolloProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}